<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DevExpress.Docs.v22.1</name>
  </assembly>
  <members>
    <member name="N:DevExpress.BarCodes">
      <summary>
        <para>Contains classes of the bar code library that allow you to generate bar code images with specific settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.BarCode">
      <summary>
        <para>Represents a bar code for given data with the specified options.</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.BarCode"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.AutoSize">
      <summary>
        <para>Allows you to create an image in a size that fits all the specified bar code options.</para>
      </summary>
      <value>true, to create an image unrestricted to the specified size; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.BackColor">
      <summary>
        <para>Gets or sets the background color of a bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.Color"/> object specifying the image background color.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.BarCodeImage">
      <summary>
        <para>Gets the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.Bitmap"/> object that is the bar code image.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.BarHeight">
      <summary>
        <para>Gets or sets the height of bars in a bar code.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the bar height in current units.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.BorderColor">
      <summary>
        <para>Gets or sets the border color of the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.Color"/> object that is the border color.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.BorderWidth">
      <summary>
        <para>Specifies the border width of the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that is the border width, measured in units specified by the <see cref="P:DevExpress.BarCodes.BarCode.Unit"/> property.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.BottomCaption">
      <summary>
        <para>Provides access to characteristics of the bar code bottom caption.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.BarCodeCaption"/> object containing caption characteristics.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.Code">
      <summary>
        <para>Get the processed code text actually shown in the bar code.</para>
      </summary>
      <value>A string that is the resulting code displayed by the bar code.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.CodeBinaryData">
      <summary>
        <para>Gets or sets the byte array to be coded into certain bar code types.</para>
      </summary>
      <value>An array of bytes to be coded using the bar code’s symbology.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.CodeText">
      <summary>
        <para>Gets or sets the text to be coded using the bar code symbology.</para>
      </summary>
      <value>A string containing the text represented by a bar code.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.CodeTextFont">
      <summary>
        <para>Specifies the font used to display the bar code text.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.Font"/> object that specifies the font attributes.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.CodeTextHorizontalAlignment">
      <summary>
        <para>Get or sets the horizontal alignment of the bar code text within the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment"/> enumeration value that specifies how the bar code text is aligned within the image.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.CodeTextVerticalAlignment">
      <summary>
        <para>Get or sets the vertical alignment of the bar code text within the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment"/> enumeration value that specifies how the bar code text is aligned within the image.</value>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.Dispose">
      <summary>
        <para>Resets the bar code image, disposes of the BarCode object and releases all the allocated resources.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.Dpi">
      <summary>
        <para>Gets or sets the dpi value used to render the bar code.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value representing the dpi value used to create the bar code image.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.DpiX">
      <summary>
        <para>Gets or sets the dpi value for the X-coordinate used to render the bar code.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value representing the dpi value used to create the bar code image.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.DpiY">
      <summary>
        <para>Gets or sets the dpi value for the Y-coordinate used to render the bar code.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value representing the dpi value used to create the bar code image.</value>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.ExportToPdf(System.IO.Stream)">
      <summary>
        <para>Exports the bar code to the specified stream in PDF format.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created document is exported.</param>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.ExportToPdf(System.String)">
      <summary>
        <para>Exports the bar code image to the specified file path in PDF format.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> which specifies the file name (including the full path) for the created PDF file.</param>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.ForeColor">
      <summary>
        <para>Gets or sets the color of bars in the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.Color"/> used to paint the bars of the bar code.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.ImageHeight">
      <summary>
        <para>Gets or sets the height of the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that is the height of an image in units specified by the <see cref="P:DevExpress.BarCodes.BarCode.Unit"/> property.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.ImageSize">
      <summary>
        <para>Gets or sets the size of the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.SizeF"/> structure that is the size of an image in units specified by the <see cref="P:DevExpress.BarCodes.BarCode.Unit"/> property.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.ImageWidth">
      <summary>
        <para>Gets or sets the width of the resulting image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that is the width of an image in units specified by the <see cref="P:DevExpress.BarCodes.BarCode.Unit"/> property.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.IsPrintingAvailable">
      <summary>
        <para>Indicates whether the bar code can be printed and exported to PDF.</para>
      </summary>
      <value>true, if the control can be printed and exported; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.Margins">
      <summary>
        <para>Provides access to margin widths set for a bar code image.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.BarCodeMargins"/> object containing margin widths for a bar code image.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.Module">
      <summary>
        <para>Gets or sets the width of the narrowest bar or space in the bar code.</para>
      </summary>
      <value>A <see cref="T:System.Double"/> value which represents the width of the narrowest bar or space.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.Options">
      <summary>
        <para>Provides access to options specific for various bar code types.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.BarCodeOptions"/> object containing type-specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.Paddings">
      <summary>
        <para>Gets the padding settings of a bar code image.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.BarCodePadding"/> object that contains padding settings.</value>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.Print">
      <summary>
        <para>Prints the barcode to the default printer.</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.PrintDialog">
      <summary>
        <para>Invokes a dialog that enables you to select a printer and change print settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.RotationAngle">
      <summary>
        <para>Gets or sets the number of degrees the bar code is rotated around the z-axis.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that is the number of degrees.</value>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
        <para>Saves the barcode image to a stream in the specified format.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration member that specifies the image format.</param>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.Save(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
        <para>Saves the barcode image to a file in the specified format.</para>
      </summary>
      <param name="fileName">Specifies the file name to which to save the image.</param>
      <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration member that specifies the image format.</param>
    </member>
    <member name="M:DevExpress.BarCodes.BarCode.ShowPrintPreview">
      <summary>
        <para>Invokes a dialog that enables you to preview the printout, print or save it in PDF format, or as an image file.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.ShowText">
      <summary>
        <para>Indicates whether the code text is shown.</para>
      </summary>
      <value>true, if the code text is displayed; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.Symbology">
      <summary>
        <para>Gets or sets the bar code type (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Symbology"/> enumeration member the specifies the current bar code type.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.TextRenderingHint">
      <summary>
        <para>Gets or sets the bar code text rendering quality.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.Text.TextRenderingHint"/> enumeration value specifying the bar code rendering quality. The default is TextRenderingHint.AntiAlias.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.TopCaption">
      <summary>
        <para>Provides access to characteristics of the bar code top caption.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.BarCodeCaption"/> object containing caption characteristics.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCode.Unit">
      <summary>
        <para>Gets or sets the unit of measurement for bar code settings.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.GraphicsUnit"/> enumeration value</value>
    </member>
    <member name="T:DevExpress.BarCodes.BarCodeCaption">
      <summary>
        <para>Provides access to the bar code caption characteristics.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeCaption.Font">
      <summary>
        <para>Gets or sets the typeface, size and style used to display the bar code caption.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.Font"/> object that is the text font specifying the typeface, size and style of the text.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeCaption.ForeColor">
      <summary>
        <para>Gets or sets the color of the text used to display the bar code caption.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.Color"/> object that specifies the text color.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeCaption.HorizontalAlignment">
      <summary>
        <para>Gets or sets the horizontal alignment of the text displayed in the bar code caption.</para>
      </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment"/> enumeration member that specifies the alignment of the text string relative to its layout rectangle.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeCaption.Paddings">
      <summary>
        <para>Provides access to paddings that specify the space between the bar code caption and the bar code edge.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.BarCodePadding"/> object containing information on paddings associated with a bar code caption.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeCaption.Text">
      <summary>
        <para>Gets or sets the text of the bar code caption.</para>
      </summary>
      <value>A string that is the text displayed in the bar code caption.</value>
    </member>
    <member name="T:DevExpress.BarCodes.BarCodeGeneratorOptions">
      <summary>
        <para>Base class for symbology-specific options.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeGeneratorOptions.ShowCodeText">
      <summary>
        <para>Gets or sets whether bar code text data should be displayed in a bar code image.</para>
      </summary>
      <value>true, to display text data; otherwise, false.</value>
    </member>
    <member name="T:DevExpress.BarCodes.BarCodeMargins">
      <summary>
        <para>Contains values used to specify bar code margins.</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.BarCodeMargins.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.BarCodeMargins"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeMargins.Bottom">
      <summary>
        <para>Gets or sets the bottom margin for the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the margin in pixels.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeMargins.Left">
      <summary>
        <para>Gets or sets the left margin for the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the margin in pixels.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeMargins.Right">
      <summary>
        <para>Gets or sets the right margin for the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the margin in pixels.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeMargins.Top">
      <summary>
        <para>Gets or sets the top margin for the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the margin in pixels.</value>
    </member>
    <member name="T:DevExpress.BarCodes.BarCodeOptions">
      <summary>
        <para>Groups options that are specific to a certain symbology.</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.BarCodeOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.BarCodeOptions"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Codabar">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.CodabarOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Code11">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Code11Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Code128">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Code128Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Code39">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Code39Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Code39Extended">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Code39ExtendedOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Code93">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Code93Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Code93Extended">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Code93ExtendedOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.CodeMSI">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.CodeMSIOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.DataBar">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.DataBarOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.DataMatrix">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.DataMatrixOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.DataMatrixGS1">
      <summary>
        <para>Provides access to options specific for this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.DataMatrixGS1Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.EAN128">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.EAN128Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.EAN13">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.EAN13Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.EAN8">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.EAN8Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Industrial2of5">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Industrial2of5Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.IntelligentMail">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.IntelligentMailOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Interleaved2of5">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.UPCSupplemental5Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.ITF14">
      <summary>
        <para>Provides access to options specific to ITF14 type (Interleaved Two of Five for GS1) bar code (symbology).</para>
      </summary>
      <value>An <see cref="T:DevExpress.BarCodes.Interleaved2of5Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.Matrix2of5">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Matrix2of5Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.PDF417">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.PDF417Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.PostNet">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.UPCSupplemental5Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.QRCode">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.QRCodeOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.UPCA">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.UPCAOptions"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.UPCE0">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.UPCE0Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.UPCE1">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.UPCE1Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.UPCSupplemental2">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.UPCSupplemental2Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodeOptions.UPCSupplemental5">
      <summary>
        <para>Provides access to options specific to this type of bar code (symbology).</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.UPCSupplemental5Options"/> class instance containing bar code specific options.</value>
    </member>
    <member name="T:DevExpress.BarCodes.BarCodePadding">
      <summary>
        <para>Contains values used to specify bar code paddings.</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.BarCodePadding.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.BarCodePadding"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodePadding.Bottom">
      <summary>
        <para>Gets or sets the bottom padding for the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the padding in pixels.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodePadding.Left">
      <summary>
        <para>Gets or sets the left padding for the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the padding in pixels.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodePadding.Right">
      <summary>
        <para>Gets or sets the right padding for the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the padding in pixels.</value>
    </member>
    <member name="P:DevExpress.BarCodes.BarCodePadding.Top">
      <summary>
        <para>Gets or sets the top padding for the bar code image.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the padding in pixels.</value>
    </member>
    <member name="T:DevExpress.BarCodes.CodabarOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.CodabarOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.CodabarOptions"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.CodabarOptions.StartStopPair">
      <summary>
        <para>Gets or sets the first (start) and last (stop) symbols used to code the bar code’s structure.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.CodabarStartStopPair"/> enumeration value that specifies the pair of start and stop symbols used. The default value is <see cref="F:DevExpress.BarCodes.CodabarStartStopPair.AT"/>.</value>
    </member>
    <member name="P:DevExpress.BarCodes.CodabarOptions.WideNarrowRatio">
      <summary>
        <para>Gets or sets the density of bars.</para>
      </summary>
      <value>A float value specifying the density of bars. The default is 2.</value>
    </member>
    <member name="T:DevExpress.BarCodes.CodabarStartStopPair">
      <summary>
        <para>Lists start/stop patterns used in bar codes.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.CodabarStartStopPair.AT">
      <summary>
        <para>The first element in a bar code is “A” and the last element is “T”.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.CodabarStartStopPair.BN">
      <summary>
        <para>The first element in a bar code is “B” and the last element is “N”.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.CodabarStartStopPair.CStar">
      <summary>
        <para>The first element in a bar code is “C” and the last element is “*”.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.CodabarStartStopPair.DE">
      <summary>
        <para>The first element in a bar code is “D” and the last element is “E”.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.CodabarStartStopPair.None">
      <summary>
        <para>There are no start (first) and stop (last) elements used in a bar code.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.Code11Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Code11Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.Code11Options"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.Code128CharacterSet">
      <summary>
        <para>Lists character sets used in Code128 bar code symbology.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Code128CharacterSet.CharsetA">
      <summary>
        <para>The “A” character set will be used for coding a bar code. It contains ASCII characters 00-95.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Code128CharacterSet.CharsetAuto">
      <summary>
        <para>The character set will be chosen automatically according to the text assigned to a bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Code128CharacterSet.CharsetB">
      <summary>
        <para>The “B” character set will be used for coding a bar code. It contains ASCII characters 32-127.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Code128CharacterSet.CharsetC">
      <summary>
        <para>The “C” character set will be used for coding a bar code. It contains numeric digit pairs from 00 to 99. Each digit pair is coded with one code element, so you can provide 01 23 pairs for coding, but not 123.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.Code128Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Code128Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.Code128Options"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.Code128Options.Charset">
      <summary>
        <para>Gets or sets the charset type for the bar code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Code128CharacterSet"/> enumeration value that specifies a charset to be used.</value>
    </member>
    <member name="T:DevExpress.BarCodes.Code39ExtendedOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Code39ExtendedOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.Code39ExtendedOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.Code39Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Code39Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.Code39Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.Code39Options.CalcCheckSum">
      <summary>
        <para>Gets or sets whether a check character should be calculated and added to the bar code data.</para>
      </summary>
      <value>true, to add a check character; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.BarCodes.Code39Options.WideNarrowRatio">
      <summary>
        <para>Gets or sets the wide bar to narrow bar ratio.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the density of bar code bars. The default is 3.</value>
    </member>
    <member name="T:DevExpress.BarCodes.Code93ExtendedOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Code93ExtendedOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.Code93ExtendedOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.Code93Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Code93Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.Code93Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.Code93Options.CalcCheckSum">
      <summary>
        <para>Gets or sets whether a check character should be calculated and added to the bar code data.</para>
      </summary>
      <value>true, to add a check character; otherwise, false.</value>
    </member>
    <member name="T:DevExpress.BarCodes.CodeMSIOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.CodeMSIOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.CodeMSIOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.DataBarOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.DataBarOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.DataBarOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.DataBarOptions.FNC1Substitute">
      <summary>
        <para>Specifies the symbol (or set of symbols) in the bar code’s text that will be replaced with the FNC1 functional character when the bars are drawn.</para>
      </summary>
      <value>A <see cref="T:System.String"/> value, specifying the symbols to be replaced.</value>
    </member>
    <member name="P:DevExpress.BarCodes.DataBarOptions.SegmentsInRow">
      <summary>
        <para>Gets or sets the number of data segments per row in the Expanded Stacked type of a GS1 DataBar bar code.</para>
      </summary>
      <value>An integer value specifying the number of data segments per row.</value>
    </member>
    <member name="P:DevExpress.BarCodes.DataBarOptions.Type">
      <summary>
        <para>Gets or sets the symbol type of the GS1 DataBar family of bar codes.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.DataBarType"/> enumeration member specifying the symbol type.</value>
    </member>
    <member name="T:DevExpress.BarCodes.DataBarType">
      <summary>
        <para>Lists symbol types of the GS1 DataBar family.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataBarType.Expanded">
      <summary>
        <para>GS1 Databar Expanded</para>
        <para />
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataBarType.ExpandedStacked">
      <summary>
        <para>GS1 Databar Expanded Stacked</para>
        <para />
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataBarType.Limited">
      <summary>
        <para>GS1 Databar Limited</para>
        <para />
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataBarType.Omnidirectional">
      <summary>
        <para>GS1 Databar Omnidirectional</para>
        <para />
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataBarType.Stacked">
      <summary>
        <para>GS1 Databar Stacked</para>
        <para />
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataBarType.StackedOmnidirectional">
      <summary>
        <para>GS1 Databar Stacked Omnidirectional</para>
        <para />
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataBarType.Truncated">
      <summary>
        <para>GS1 Databar Truncated</para>
        <para />
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.DataMatrixCompactionMode">
      <summary>
        <para>Lists compaction modes used in DataMatrix bar code symbology.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixCompactionMode.ASCII">
      <summary>
        <para>Encoding mode used to store double digit numerics, ASCII values 0 - 127, and Extended ASCII values 128 - 255.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixCompactionMode.Binary">
      <summary>
        <para>Encoding mode used to store binary data. They are encoded using 8 bits per symbol.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixCompactionMode.C40">
      <summary>
        <para>Encoding mode for upper-case alphanumeric, lower case and special characters.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixCompactionMode.Edifact">
      <summary>
        <para>Encoding mode for ASCII values from 32 to 94.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixCompactionMode.Text">
      <summary>
        <para>Encoding mode for lower-case alphanumeric, upper case and special characters.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixCompactionMode.X12">
      <summary>
        <para>Encoding mode for ANSI X12 EDI data set.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.DataMatrixGS1Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.DataMatrixGS1Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.DataMatrixGS1Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.DataMatrixGS1Options.FNC1Substitut">
      <summary>
        <para>Gets or sets the symbol (or set of symbols) that will be replaced in the bar code data with the FNC1 functional character.</para>
      </summary>
      <value>A <see cref="T:System.String"/> specifying the symbols to be replaced.</value>
    </member>
    <member name="P:DevExpress.BarCodes.DataMatrixGS1Options.FNC1Substitute">
      <summary>
        <para>Gets or sets the symbol (or set of symbols) that will be replaced in the bar code data with the FNC1 functional character.</para>
      </summary>
      <value>A <see cref="T:System.String"/> specifying the symbols to be replaced.</value>
    </member>
    <member name="T:DevExpress.BarCodes.DataMatrixOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.DataMatrixOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.DataMatrixOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.DataMatrixOptions.CompactionMode">
      <summary>
        <para>Gets or sets the encoding scheme used to encode data in the DataMatrix Code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.DataMatrixCompactionMode"/> enumeration member that specifies the encoding scheme.</value>
    </member>
    <member name="P:DevExpress.BarCodes.DataMatrixOptions.MatrixSize">
      <summary>
        <para>Gets or sets the bar code matrix size.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.DataMatrixSize"/> enumeration value.</value>
    </member>
    <member name="T:DevExpress.BarCodes.DataMatrixSize">
      <summary>
        <para>Lists the available data matrix size options related to the Data Matrix (ECC200) bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix104x104">
      <summary>
        <para>The bar code matrix size is 104x104.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix10x10">
      <summary>
        <para>The bar code matrix size is 10x10.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix120x120">
      <summary>
        <para>The bar code matrix size is 120x120.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix12x12">
      <summary>
        <para>The bar code matrix size is 12x12.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix12x26">
      <summary>
        <para>The bar code matrix size is 12x26.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix12x36">
      <summary>
        <para>The bar code matrix size is 12x36.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix132x132">
      <summary>
        <para>The bar code matrix size is 132x132.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix144x144">
      <summary>
        <para>The bar code matrix size is 144x144.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix14x14">
      <summary>
        <para>The bar code matrix size is 14x14.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix16x16">
      <summary>
        <para>The bar code matrix size is 16x16.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix16x36">
      <summary>
        <para>The bar code matrix size is 16x36.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix16x48">
      <summary>
        <para>The bar code matrix size is 16x48.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix18x18">
      <summary>
        <para>The bar code matrix size is 18x18.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix20x20">
      <summary>
        <para>The bar code matrix size is 20x20.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix22x22">
      <summary>
        <para>The bar code matrix size is 22x22.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix24x24">
      <summary>
        <para>The bar code matrix size is 24x24.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix26x26">
      <summary>
        <para>The bar code matrix size is 26x26.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix32x32">
      <summary>
        <para>The bar code matrix size is 32x32.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix36x36">
      <summary>
        <para>The bar code matrix size is 36x36.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix40x40">
      <summary>
        <para>The bar code matrix size is 40x40.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix44x44">
      <summary>
        <para>The bar code matrix size is 44x44.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix48x48">
      <summary>
        <para>The bar code matrix size is 48x48.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix52x52">
      <summary>
        <para>The bar code matrix size is 52x52.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix64x64">
      <summary>
        <para>The bar code matrix size is 64x64.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix72x72">
      <summary>
        <para>The bar code matrix size is 72x72.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix80x80">
      <summary>
        <para>The bar code matrix size is 80x80.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix88x88">
      <summary>
        <para>The bar code matrix size is 88x88.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix8x18">
      <summary>
        <para>The bar code matrix size is 8x18.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix8x32">
      <summary>
        <para>The bar code matrix size is 8x32.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.Matrix96x96">
      <summary>
        <para>The bar code matrix size is 96x96.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.DataMatrixSize.MatrixAuto">
      <summary>
        <para>The bar code matrix size is auto-adjusted, depending on the quantity of encoded data.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.EAN128Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.EAN128Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.EAN128Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.EAN128Options.Charset">
      <summary>
        <para>Gets or sets the character set used for encoding.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.Code128CharacterSet"/> enumeration value that specifies a character set.</value>
    </member>
    <member name="P:DevExpress.BarCodes.EAN128Options.FNC1Substitut">
      <summary>
        <para>Gets or sets the symbol (or set of symbols) that will be replaced in the barcode data with the FNC1 functional character.</para>
      </summary>
      <value>A <see cref="T:System.String"/> specifying the symbols to be replaced.</value>
    </member>
    <member name="P:DevExpress.BarCodes.EAN128Options.FNC1Substitute">
      <summary>
        <para>Gets or sets the symbol (or set of symbols) that will be replaced in the bar code data with the FNC1 functional character.</para>
      </summary>
      <value>A <see cref="T:System.String"/> specifying the symbols to be replaced.</value>
    </member>
    <member name="T:DevExpress.BarCodes.EAN13Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.EAN13Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.EAN13Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.EAN8Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.EAN8Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.EAN8Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.Industrial2of5Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Industrial2of5Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.Industrial2of5Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.Industrial2of5Options.CalcCheckSum">
      <summary>
        <para>Gets or sets whether a check character should be calculated and added to the bar code data.</para>
      </summary>
      <value>true, to add a check character; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.BarCodes.Industrial2of5Options.WideNarrowRatio">
      <summary>
        <para>Gets or sets the wide bar to narrow bar ratio.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the density of bar code bars. The default is 2.5.</value>
    </member>
    <member name="T:DevExpress.BarCodes.IntelligentMailOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.IntelligentMailOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.IntelligentMailOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.Interleaved2of5Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Interleaved2of5Options.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.BarCodes.Interleaved2of5Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.Interleaved2of5Options.CalcCheckSum">
      <summary>
        <para>Gets or sets whether a check character should be calculated and added to the bar code data.</para>
      </summary>
      <value>true, to add a check character; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.BarCodes.Interleaved2of5Options.WideNarrowRatio">
      <summary>
        <para>Gets or sets the wide bar to narrow bar ratio.</para>
      </summary>
      <value>A <see cref="T:System.Single"/> value that specifies the density of bar code bars. The default is 3.</value>
    </member>
    <member name="T:DevExpress.BarCodes.Matrix2of5Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.Matrix2of5Options.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.Matrix2of5Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.PDF417CompactionMode">
      <summary>
        <para>Lists compaction modes used in PDF417 symbology.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417CompactionMode.Binary">
      <summary>
        <para>Allows encoding of all 8-bit byte values.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417CompactionMode.Text">
      <summary>
        <para>Allows encoding of all printable ASCII characters. The default mode.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.PDF417ErrorLevel">
      <summary>
        <para>Lists levels of error correction.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level0">
      <summary>
        <para>Identifies the zero error correction level of the PDF417 bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level1">
      <summary>
        <para>Identifies the first error correction level of the PDF417 bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level2">
      <summary>
        <para>Identifies the second error correction level of the PDF417 bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level3">
      <summary>
        <para>Identifies the third error correction level of the PDF417 bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level4">
      <summary>
        <para>Identifies the fourth error correction level of the PDF417 bar code</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level5">
      <summary>
        <para>Identifies the fifth error correction level of the PDF417 bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level6">
      <summary>
        <para>Identifies the sixth error correction level of the PDF417 bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level7">
      <summary>
        <para>Identifies the seventh error correction level of the PDF417 bar code.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.PDF417ErrorLevel.Level8">
      <summary>
        <para>Identifies the eighth error correction level of the PDF417 bar code.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.PDF417Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.PDF417Options.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.PDF417Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.PDF417Options.Columns">
      <summary>
        <para>Gets or sets the number of columns in the symbol in the data region.</para>
      </summary>
      <value>An integer that specifies the number of columns used in a PDF417 code. The default is 1.</value>
    </member>
    <member name="P:DevExpress.BarCodes.PDF417Options.CompactionMode">
      <summary>
        <para>Gets or sets the mode used for data encoding in the PDF417 Code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.PDF417CompactionMode"/> enumeration member that specifies the encoding algorithm.</value>
    </member>
    <member name="P:DevExpress.BarCodes.PDF417Options.ErrorLevel">
      <summary>
        <para>Gets or sets the error correction level for the PDF417 Code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.PDF417ErrorLevel"/> enumeration member that specifies the level of error correction.</value>
    </member>
    <member name="P:DevExpress.BarCodes.PDF417Options.Rows">
      <summary>
        <para>Gets or sets the number of rows used to construct a PDF417 Code.</para>
      </summary>
      <value>An integer that is the number of rows. The default is 3.</value>
    </member>
    <member name="P:DevExpress.BarCodes.PDF417Options.TruncateSymbol">
      <summary>
        <para>Gets or sets whether the right-hand side of the PDF417 Code symbol is truncated to create a compact code.</para>
      </summary>
      <value>true, to create a compact bar code; otherwise, false. The default is false.</value>
    </member>
    <member name="T:DevExpress.BarCodes.PostNetOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.PostNetOptions.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.PostNetOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.QRCodeCompactionMode">
      <summary>
        <para>Lists compaction modes for the QRCode bar code symbology.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeCompactionMode.AlphaNumeric">
      <summary>
        <para>Encodes data from a set of alphanumeric characters, i.e., digits 0 - 9; upper case letters A - Z; other characters: space, ($), (%), (&#0042;), (&#0043;), (&#0045;), (.), (/) and (:). The default mode.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeCompactionMode.Byte">
      <summary>
        <para>Data is encoded at 8 bits per character (IEC_8859-1).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeCompactionMode.Numeric">
      <summary>
        <para>Encodes data from the set of digits from 0 to 9.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.QRCodeErrorLevel">
      <summary>
        <para>Lists error correction levels for the QRCode.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeErrorLevel.H">
      <summary>
        <para>Allows recovery of up to 30% data loss.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeErrorLevel.L">
      <summary>
        <para>Allows recovery of up to 7% data loss.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeErrorLevel.M">
      <summary>
        <para>Allows recovery of up to 15% data loss.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeErrorLevel.Q">
      <summary>
        <para>Allows recovery of up to 25% data loss.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.QRCodeOptions">
      <summary>
        <para>Contains options specific to the QR symbology.</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.QRCodeOptions.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.QRCodeOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.BarCodes.QRCodeOptions.CompactionMode">
      <summary>
        <para>Gets or sets the mode for data encoding in the QR code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.QRCodeCompactionMode"/> enumeration member that specifies the data compaction mode.</value>
    </member>
    <member name="P:DevExpress.BarCodes.QRCodeOptions.ErrorLevel">
      <summary>
        <para>Gets or sets the error correction level used in QR Code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.QRCodeErrorLevel"/> enumeration member that specifies the error correction level.</value>
    </member>
    <member name="P:DevExpress.BarCodes.QRCodeOptions.Version">
      <summary>
        <para>Gets or sets the QR Code version.</para>
      </summary>
      <value>A <see cref="T:DevExpress.BarCodes.QRCodeVersion"/> enumeration value indicating the code version.</value>
    </member>
    <member name="T:DevExpress.BarCodes.QRCodeVersion">
      <summary>
        <para>Lists values used to specify the QR Code version.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.AutoVersion">
      <summary>
        <para>The auto-calculated version.</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version1">
      <summary>
        <para>Version 1 (21 x 21 modules)</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version10">
      <summary>
        <para>Version 10 (57 x 57 modules)</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version11">
      <summary>
        <para>Version 11 (61 x 61 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version12">
      <summary>
        <para>Version 12 (65 x 65 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version13">
      <summary>
        <para>Version 13 (69 x 69 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version14">
      <summary>
        <para>Version 14 (73 x 73 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version15">
      <summary>
        <para>Version 15 (77 x 77 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version16">
      <summary>
        <para>Version 16 (81 x 81 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version17">
      <summary>
        <para>Version 17 (85 x 85 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version18">
      <summary>
        <para>Version 18 (89 x 89 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version19">
      <summary>
        <para>Version 19 (93 x 93 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version2">
      <summary>
        <para>Version 2 (25 x 25 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version20">
      <summary>
        <para>Version 20 (97 x 97 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version21">
      <summary>
        <para>Version 21 (101 x 101 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version22">
      <summary>
        <para>Version 22 (105 x 105 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version23">
      <summary>
        <para>Version 23 (109 x 109 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version24">
      <summary>
        <para>Version 24 (113 x 113 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version25">
      <summary>
        <para>Version 25 (117 x 117 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version26">
      <summary>
        <para>Version 26 (121 x 121 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version27">
      <summary>
        <para>Version 27 (125 x 125 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version28">
      <summary>
        <para>Version 28 (129 x 129 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version29">
      <summary>
        <para>Version 29 (133 x 133 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version3">
      <summary>
        <para>Version 3 (29 x 29 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version30">
      <summary>
        <para>Version 30 (137 x 137 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version31">
      <summary>
        <para>Version 31 (141 x 141 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version32">
      <summary>
        <para>Version 32 (145 x 145 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version33">
      <summary>
        <para>Version 33 (149 x 149 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version34">
      <summary>
        <para>Version 34 (153 x 153 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version35">
      <summary>
        <para>Version 35 (157 x 157 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version36">
      <summary>
        <para>Version 36 (161 x 161 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version37">
      <summary>
        <para>Version 37 (165 x 165 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version38">
      <summary>
        <para>Version 38 (169 x 169 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version39">
      <summary>
        <para>Version 39 (173 x 173 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version4">
      <summary>
        <para>Version 4 (33 x 33 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version40">
      <summary>
        <para>Version 40 (177 x 177 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version5">
      <summary>
        <para>Version 5 (37 x 37 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version6">
      <summary>
        <para>Version 6 (41 x 41 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version7">
      <summary>
        <para>Version 7 (45 x 45 modules).</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version8">
      <summary>
        <para>Version 8 (49 x 49 modules)</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.QRCodeVersion.Version9">
      <summary>
        <para>Version 9 (53 x 53 modules).</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.Symbology">
      <summary>
        <para>Lists available symbologies (bar code types)</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Codabar">
      <summary>
        <para />
        <para>Codabar</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Code11">
      <summary>
        <para />
        <para>Code 11 (USD-8)</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Code128">
      <summary>
        <para />
        <para>Code 128</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Code39">
      <summary>
        <para />
        <para>Code 39 (USD-3)</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Code39Extended">
      <summary>
        <para />
        <para>Code 39 Extended</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Code93">
      <summary>
        <para />
        <para>Code 93</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Code93Extended">
      <summary>
        <para />
        <para>Code 93 Extended</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.CodeMSI">
      <summary>
        <para />
        <para>MSI - Plessey</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.DataBar">
      <summary>
        <para />
        <para>GS1 DataBar</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.DataMatrix">
      <summary>
        <para />
        <para>Data Matrix (ECC200)</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.DataMatrixGS1">
      <summary>
        <para />
        <para>GS1- Data Matrix</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.EAN128">
      <summary>
        <para />
        <para>EAN-128 (UCC)</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.EAN13">
      <summary>
        <para />
        <para>EAN 13</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.EAN8">
      <summary>
        <para />
        <para>EAN 8</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Industrial2of5">
      <summary>
        <para />
        <para>Industrial 2 of 5</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.IntelligentMail">
      <summary>
        <para />
        <para>Intelligent Mail</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Interleaved2of5">
      <summary>
        <para />
        <para>Interleaved 2 of 5</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.ITF14">
      <summary>
        <para />
        <para>GS1 DataBar</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.Matrix2of5">
      <summary>
        <para />
        <para>Matrix 2 of 5</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.PDF417">
      <summary>
        <para />
        <para>PDF417</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.PostNet">
      <summary>
        <para />
        <para>PostNet</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.UPCA">
      <summary>
        <para />
        <para>UPC-A</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.UPCE0">
      <summary>
        <para />
        <para>UPC-E0</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.UPCE1">
      <summary>
        <para />
        <para>UPC-E1</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.UPCSupplemental2">
      <summary>
        <para />
        <para>UPC Supplemental 2</para>
      </summary>
    </member>
    <member name="F:DevExpress.BarCodes.Symbology.UPCSupplemental5">
      <summary>
        <para />
        <para>UPC Supplemental 5</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.UPCAOptions">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.UPCAOptions.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.UPCAOptions"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.UPCE0Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.UPCE0Options.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.UPCE0Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.UPCE1Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.UPCE1Options.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.UPCE1Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.UPCSupplemental2Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.UPCSupplemental2Options.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.UPCSupplemental2Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.BarCodes.UPCSupplemental5Options">
      <summary>
        <para>Contains options specific to this symbology (bar code type).</para>
      </summary>
    </member>
    <member name="M:DevExpress.BarCodes.UPCSupplemental5Options.#ctor">
      <summary>
        <para>Initialize a new instance of the <see cref="T:DevExpress.BarCodes.UPCSupplemental5Options"/> class with default settings.</para>
      </summary>
    </member>
    <member name="N:DevExpress.Compression">
      <summary>
        <para>Contains classes of the Compression library intended to implement zip compression and archive generation functionality.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Compression.AllowFileOverwriteEventArgs">
      <summary>
        <para>Provides data for the ZipArchive.AllowFileOverwrite event.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.AllowFileOverwriteEventArgs.#ctor(DevExpress.Compression.ZipItem,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.AllowFileOverwriteEventArgs"/> class with the zip item and the path to where it will be unzipped.</para>
      </summary>
      <param name="zipItem">A <see cref="T:DevExpress.Compression.ZipItem"/> descendant that is the zip item being unzipped.</param>
      <param name="targetFilePath">A string that specifies the path to the file in which the zip item will be saved after unzipping.</param>
    </member>
    <member name="P:DevExpress.Compression.AllowFileOverwriteEventArgs.TargetFilePath">
      <summary>
        <para>Gets the path to the file to which the zip item will be unzipped.</para>
      </summary>
      <value>A string that is the file path.</value>
    </member>
    <member name="P:DevExpress.Compression.AllowFileOverwriteEventArgs.ZipItem">
      <summary>
        <para>Obtains the zip item for which a file conflict is detected.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Compression.ZipItem"/> descendant that is the zip item being unzipped.</value>
    </member>
    <member name="T:DevExpress.Compression.AllowFileOverwriteEventHandler">
      <summary>
        <para>A method that will handle the <see cref="E:DevExpress.Compression.ZipArchive.AllowFileOverwrite"/> event.</para>
      </summary>
      <param name="sender">The event source. This parameter identifies the <see cref="T:DevExpress.Compression.ZipArchive"/>, which raised the event.</param>
      <param name="e">A <see cref="T:DevExpress.Compression.AllowFileOverwriteEventArgs"/> object which contains event data.</param>
    </member>
    <member name="T:DevExpress.Compression.AllowFileOverwriteMode">
      <summary>
        <para>Lists available modes to handle a file conflict when unzipping the archive.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.AllowFileOverwriteMode.Allow">
      <summary>
        <para>Allows overwriting files in the destination path without prompting.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.AllowFileOverwriteMode.Custom">
      <summary>
        <para>Fires the <see cref="E:DevExpress.Compression.ZipArchive.AllowFileOverwrite"/> event if a file name conflict occurs.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.AllowFileOverwriteMode.Forbidden">
      <summary>
        <para>If a file name conflict occurs, the unzipping process skips to the next zip item and the file in the destination path remains intact.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Compression.CanContinueEventArgs">
      <summary>
        <para>Base class that provides data to indicate whether the process can proceed further.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Compression.CanContinueEventArgs.CanContinue">
      <summary>
        <para>Gets or sets the value that specifies whether the process can proceed further.</para>
      </summary>
      <value>true, to allow the process to continue; otherwise, false.</value>
    </member>
    <member name="T:DevExpress.Compression.EncryptionType">
      <summary>
        <para>Lists the available encryption types.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.EncryptionType.Aes128">
      <summary>
        <para>Use the Advanced Encryption Standard (AES) cryptographic with keys that are 128 bits long.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.EncryptionType.Aes192">
      <summary>
        <para>Use the Advanced Encryption Standard (AES) cryptographic with keys that are 192 bits long.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.EncryptionType.Aes256">
      <summary>
        <para>Use the Advanced Encryption Standard (AES) cryptographic with keys that are 256 bits long.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.EncryptionType.None">
      <summary>
        <para>Do not use encryption.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.EncryptionType.PkZip">
      <summary>
        <para>Use the PKZIP encryption algorithm.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Compression.ErrorEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:DevExpress.Compression.ZipArchive.Error"/> event.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ErrorEventArgs.#ctor(System.Exception,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ErrorEventArgs"/> class with the specified settings.</para>
      </summary>
      <param name="exception">A <see cref="T:System.Exception"/> object that is the exception that triggered the event.</param>
      <param name="itemName">A string that is the name of the zip item that caused an error or an empty string if an error occurs while reading the directory or saving the archive.</param>
    </member>
    <member name="M:DevExpress.Compression.ErrorEventArgs.GetException">
      <summary>
        <para>Obtains the exception that triggered the error event.</para>
      </summary>
      <returns>A <see cref="T:System.Exception"/> object that is the exception that triggered the event.</returns>
    </member>
    <member name="P:DevExpress.Compression.ErrorEventArgs.ItemName">
      <summary>
        <para>Obtains the zip item name for which the error occurs.</para>
      </summary>
      <value>A string that is the zip item name.</value>
    </member>
    <member name="T:DevExpress.Compression.ErrorEventHandler">
      <summary>
        <para>A method that will handle the <see cref="E:DevExpress.Compression.ZipArchive.Error"/> event.</para>
      </summary>
      <param name="sender">The event source. This parameter identifies the <see cref="T:DevExpress.Compression.ZipArchive"/> which raised the event.</param>
      <param name="args">A <see cref="T:DevExpress.Compression.ErrorEventArgs"/> object which contains event data.</param>
    </member>
    <member name="T:DevExpress.Compression.ProgressEventArgs">
      <summary>
        <para>Provides data for the ZipArchive.Progress event.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ProgressEventArgs.#ctor(System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ProgressEventArgs"/> class with the specified progress value.</para>
      </summary>
      <param name="progress">A <see cref="T:System.Double"/> value that specifies the progress.</param>
    </member>
    <member name="P:DevExpress.Compression.ProgressEventArgs.Progress">
      <summary>
        <para>Obtains the progress value.</para>
      </summary>
      <value>A <see cref="T:System.Double"/> value in the range from 0 to 1 that indicates the progress.</value>
    </member>
    <member name="T:DevExpress.Compression.ProgressEventHandler">
      <summary>
        <para>A method that will handle the <see cref="E:DevExpress.Compression.ZipArchive.Progress"/> event.</para>
      </summary>
      <param name="sender">The event source. This parameter identifies the <see cref="T:DevExpress.Compression.ZipArchive"/>, which raised the event.</param>
      <param name="args">A <see cref="T:DevExpress.Compression.ErrorEventArgs"/> object which contains event data.</param>
    </member>
    <member name="T:DevExpress.Compression.WrongPasswordException">
      <summary>
        <para>An exception that is thrown when an encrypted zip file item is extracted with an invalid password.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.WrongPasswordException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.WrongPasswordException"/> class with the specified password.</para>
      </summary>
      <param name="password">A string that is the incorrect password which is the reason for the exception.</param>
    </member>
    <member name="P:DevExpress.Compression.WrongPasswordException.Password">
      <summary>
        <para>Gets the name of the incorrect password which caused an exception.</para>
      </summary>
      <value>A string that is the incorrect password.</value>
    </member>
    <member name="T:DevExpress.Compression.ZipArchive">
      <summary>
        <para>The central object of the library - a package of entries containing compressed data.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipArchive"/> class with default settings.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipArchive"/> class and specifies whether to catch exceptions in archive operations.</para>
      </summary>
      <param name="catchExceptions">True, to catch exceptions during archive operations; otherwise, false.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddByteArray(System.String,System.Byte[])">
      <summary>
        <para>Creates a zip item from a byte array and adds it to archive.</para>
      </summary>
      <param name="name">A string that is the name of the zip item.</param>
      <param name="content">A <see cref="T:System.Byte"/>[] array to compress and store in a zip item.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipByteArrayItem"/> object that is the compressed array of bytes in an archive.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddDirectory(System.String,System.String)">
      <summary>
        <para>Recursively add files and directories to the archive.</para>
      </summary>
      <param name="path">A string that is the path to a directory which will be included in the archive.</param>
      <param name="archivePath">A string that is the path in the archive.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipDirectoryItem"/> that is the zip item container for the directory. Currently, the method always returns null.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddDirectory(System.String)">
      <summary>
        <para>Recursively add files and directories to the archive directory named by the last component of the specified path.</para>
      </summary>
      <param name="path">A string that is the path to a directory which will be recursively included in the archive.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipDirectoryItem"/> that is the zip item container for the directory. Currently, the method always returns null.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddFile(System.String,System.String)">
      <summary>
        <para>Creates a zip file item for the specified file and adds it to the specified path in the archive.</para>
      </summary>
      <param name="fileName">A string that is the path to the file.</param>
      <param name="relativePath">A string that is the path in the archive.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipFileItem"/> that is the file item in the archive.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddFile(System.String)">
      <summary>
        <para>Creates a zip file item for the specified file and adds it to the archive.</para>
      </summary>
      <param name="fileName">A string that is the path to the file.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipFileItem"/> that is the file item in the archive.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
        <para>Adds files to the archive at the specified path.</para>
      </summary>
      <param name="fileNames">A list of file names which implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/>&lt;<see cref="T:System.String"/>,&gt; interface.</param>
      <param name="archivePath">A string that specifies the archive path to which the files will be added.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddFiles(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <para>Adds files to archive.</para>
      </summary>
      <param name="fileNames">A list of file names which implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/>&lt;<see cref="T:System.String"/>,&gt; interface.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddStream(System.String,System.IO.Stream)">
      <summary>
        <para>Creates a zip stream item and adds it to the archive.</para>
      </summary>
      <param name="name">A string that is the name of the newly created zip item.</param>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object containing data to add to the archive.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipStreamItem"/> object that references the stream of data included in an archive.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddText(System.String,System.String,System.Text.Encoding)">
      <summary>
        <para>Creates a text zip item and adds it to archive.</para>
      </summary>
      <param name="name">A string that is the name of the text zip item.</param>
      <param name="content">A string that is the text to compress and store in a text zip item.</param>
      <param name="encoding">A <see cref="T:System.Text.Encoding"/> object that specifies character encoding of the compressed text.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipTextItem"/> object that is the compressed text item in an archive.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddText(System.String,System.String)">
      <summary>
        <para>Creates a text zip item and adds it to the archive.</para>
      </summary>
      <param name="name">A string specifying the name of the text zip item.</param>
      <param name="content">A string that is the text to compress and store in a text zip item.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipTextItem"/> object that is the compressed text item in an archive.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.AddText(System.String)">
      <summary>
        <para>Creates an empty text zip item and adds it to archive.</para>
      </summary>
      <param name="name">A string specifying the name of the text zip item.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipTextItem"/> object that is the compressed text item in an archive.</returns>
    </member>
    <member name="E:DevExpress.Compression.ZipArchive.AllowFileOverwrite">
      <summary>
        <para>Occurs when the item extracted from the archive tries to overwrite a file that already exists.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Compression.ZipArchive.CatchExceptions">
      <summary>
        <para>Allows you to set an application-wide flag that specifies whether exceptions which occur in ZipArchive operations are caught.</para>
      </summary>
      <value>True to catch exceptions; false to allow exceptions to propagate; if null or not set, no effect.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipArchive.Count">
      <summary>
        <para>Obtains the number of zip items in the archive.</para>
      </summary>
      <value>An integer that is the number of zip items.</value>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Dispose">
      <summary>
        <para>Clears all zip items, disposes all associated streams and releases all resources used by the ZipArchive object.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Compression.ZipArchive.EncryptionType">
      <summary>
        <para>Gets or sets the default encryption type.</para>
      </summary>
      <value>An <see cref="T:DevExpress.Compression.EncryptionType"/> enumeration member specifying the encryption type. Default is <see cref="F:DevExpress.Compression.EncryptionType.None"/>.</value>
    </member>
    <member name="E:DevExpress.Compression.ZipArchive.Error">
      <summary>
        <para>Fires when an error occurs while adding files to the archive, processing archive items or saving the archive.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Extract">
      <summary>
        <para>Extract all archive items as files into the current directory.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Extract(System.String,DevExpress.Compression.AllowFileOverwriteMode)">
      <summary>
        <para>Extracts all archive items as files into the specified directory and enables you to define the behavior in case of file name conflicts.</para>
      </summary>
      <param name="path">A string that is the path to the directory to which the files are extracted.</param>
      <param name="mode">An <see cref="T:DevExpress.Compression.AllowFileOverwriteMode"/> enumeration member that specifies the behavior if a file name conflict occurs.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Extract(System.String)">
      <summary>
        <para>Extracts all archive items as files into the specified directory.</para>
      </summary>
      <param name="path">A string that is the path to the directory to which the files are extracted.</param>
    </member>
    <member name="P:DevExpress.Compression.ZipArchive.FileName">
      <summary>
        <para>Reserved for future use.</para>
      </summary>
      <value>A string that is the file name. By default is null.</value>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.IsValid">
      <summary>
        <para>Reserved for future use.</para>
      </summary>
      <returns>Always true.</returns>
    </member>
    <member name="P:DevExpress.Compression.ZipArchive.Item(System.Int32)">
      <summary>
        <para>Provides indexed access to an individual zip item in the archive.</para>
      </summary>
      <param name="index">An integer value that is the zero-based index of items within the archive.</param>
      <value>A <see cref="T:DevExpress.Compression.ZipItem"/> descendant that is the archive item at the specified position within the collection of items in the archive.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipArchive.Item(System.String)">
      <summary>
        <para>Provides access to individual zip items in the archive by their names.</para>
      </summary>
      <param name="name">A string that is the name of the zip item.</param>
      <value>A <see cref="T:DevExpress.Compression.ZipItem"/> descendant that is the zip item with the specified name.</value>
    </member>
    <member name="E:DevExpress.Compression.ZipArchive.ItemAdding">
      <summary>
        <para>Occurs before a zip item is added to the archive.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Compression.ZipArchive.OptionsBehavior">
      <summary>
        <para>Provides access to archive options.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Compression.ZipArchiveOptionsBehavior"/> object containing archive options.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipArchive.Password">
      <summary>
        <para>Gets or sets the password for an encrypted archive.</para>
      </summary>
      <value>A string that is the password used to encrypt the archive.</value>
    </member>
    <member name="E:DevExpress.Compression.ZipArchive.Progress">
      <summary>
        <para>Occurs evenly while the items are being compressed to indicate progress.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Read(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>
        <para>Static method that creates a ZipArchive instance from the specified stream containing zipped data, use the specified encoding for the zip item names and allows you not to catch exceptions when extracting a particular zip entry.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object that is the stream containing archive data.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"/> object that specifies character encoding for the zip item names.</param>
      <param name="catchExceptions">True to catch exceptions when extracting a particular zip entry and skip the problematic entry; otherwise, false.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipArchive"/> instance that is the zip archive for modification or extraction.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Read(System.IO.Stream,System.Text.Encoding)">
      <summary>
        <para>Static method that creates a ZipArchive instance from the specified stream containing zipped data.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object that is the stream containing archive data.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"/> object that specifies character encoding for the zip item names.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipArchive"/> instance that is the zip archive for modification or extraction.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Read(System.IO.Stream)">
      <summary>
        <para>Static method that creates a ZipArchive instance from the specified stream containing zipped data.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object that is the stream containing archive data.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipArchive"/> instance that is the zip archive for modification or extraction.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Read(System.String,System.Text.Encoding,System.Boolean)">
      <summary>
        <para>Static method that creates a ZipArchive instance from the archive file, uses the specified encoding for the zip item names and allows you not to catch exceptions when extracting a particular zip entry.</para>
      </summary>
      <param name="fileName">A string that is the path to the archive file.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"/> object that specifies character encoding for the zip item names.</param>
      <param name="catchExceptions">True, to catch exceptions when extracting a particular zip entry and skip the problematic entry; otherwise, false.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipArchive"/> instance that is the zip archive for modification or extraction.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Read(System.String,System.Text.Encoding)">
      <summary>
        <para>Static method that creates a ZipArchive instance from the specified archive file.</para>
      </summary>
      <param name="fileName">A string that is the path to the archive file.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"/> object that specifies character encoding for the zip item names.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipArchive"/> instance that is the zip archive for modification or extraction.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Read(System.String)">
      <summary>
        <para>Static method that creates a ZipArchive instance from the specified archive file.</para>
      </summary>
      <param name="fileName">A string that is the path to the archive file.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipArchive"/> instance that is the zip archive for modification or extraction.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.RemoveItem(DevExpress.Compression.ZipItem)">
      <summary>
        <para>Deletes a specified zip item from the archive.</para>
      </summary>
      <param name="item">A <see cref="T:DevExpress.Compression.ZipItem"/> instance to remove.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.RemoveItem(System.String)">
      <summary>
        <para>Deletes a specified zip item from the archive.</para>
      </summary>
      <param name="name">A string that is the name of a zip item to remove.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Save(System.IO.Stream)">
      <summary>
        <para>Compresses data and saves it to a specified stream.</para>
      </summary>
      <param name="stream">The <see cref="T:System.IO.Stream"/> object to output the archive to.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Save(System.String)">
      <summary>
        <para>Compresses data and saves it to a file.</para>
      </summary>
      <param name="fileName">A string that is the file name of the archive to store zipped data.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.UpdateDirectory(System.String,System.String)">
      <summary>
        <para>Recursively updates files and nested directories starting from the specified directory.</para>
      </summary>
      <param name="path">A string that is the path to a directory from which the update starts.</param>
      <param name="archivePath">A string that is the path in the archive.</param>
      <returns>Currently, always returns null.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.UpdateDirectory(System.String)">
      <summary>
        <para>Recursively updates files and nested directories starting from the specified directory.</para>
      </summary>
      <param name="path">A string that is the path to a directory from which the update starts.</param>
      <returns>Currently, always returns null.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.UpdateFile(System.String,System.String)">
      <summary>
        <para>Updates content of the zip file item.</para>
      </summary>
      <param name="fileName">A string that is the path to the file which will replace the file in the archive.</param>
      <param name="relativePath">A string that is the path in archive.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipFileItem"/> object that is the updated zip file item.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.UpdateFile(System.String)">
      <summary>
        <para>Updates content of the zip file item.</para>
      </summary>
      <param name="fileName">A string that is the path to the file which will replace the file in the archive.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipFileItem"/> object that is the updated zip file item.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.UpdateStream(System.String,System.IO.Stream)">
      <summary>
        <para>Updates the content of the zip stream item.</para>
      </summary>
      <param name="name">A string that is the name of the zip stream item to update.</param>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object that is the new stream of data for the zip stream item.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipStreamItem"/> object that is the updated zip stream item.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.UpdateText(System.String,System.String,System.Text.Encoding)">
      <summary>
        <para>Updates the content of the zip text item and specifies a new character encoding.</para>
      </summary>
      <param name="name">A string that is the name of the zip text item to update.</param>
      <param name="content">A string that is the new text content of the zip text item.</param>
      <param name="encoding">A <see cref="T:System.Text.Encoding"/> object that specifies the character encoding of the text content.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipTextItem"/> object that is the updated zip text item.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.UpdateText(System.String,System.String)">
      <summary>
        <para>Updates the content of the zip text item.</para>
      </summary>
      <param name="name">A string that is the name of the zip text item to update.</param>
      <param name="content">A string that is the new text content of the zip text item.</param>
      <returns>A <see cref="T:DevExpress.Compression.ZipTextItem"/> object that is the updated zip text item.</returns>
    </member>
    <member name="M:DevExpress.Compression.ZipArchive.Validate">
      <summary>
        <para>Verifies archive entries by extracting them into memory and catching exceptions.</para>
      </summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1"/>&lt;<see cref="T:DevExpress.Compression.ZipItem"/>,&gt; list of archive items which cannot be successfully extracted.</returns>
    </member>
    <member name="T:DevExpress.Compression.ZipArchiveOptionsBehavior">
      <summary>
        <para>Contains options that specify how the zip archive performs certain actions.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipArchiveOptionsBehavior.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipArchiveOptionsBehavior"/> class with default settings.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Compression.ZipArchiveOptionsBehavior.AllowFileOverwrite">
      <summary>
        <para>Gets or sets the default behavior in case of a file conflict when extracting files from an archive.</para>
      </summary>
      <value>An <see cref="T:DevExpress.Compression.AllowFileOverwriteMode"/> enumeration value that specifies the default behavior.</value>
    </member>
    <member name="T:DevExpress.Compression.ZipByteArrayItem">
      <summary>
        <para>A zip item specific to the byte array source.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipByteArrayItem.#ctor(System.String,System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipByteArrayItem"/> class with the specified name and content.</para>
      </summary>
      <param name="name">A string that specifies the name of the zip item.</param>
      <param name="content">A <see cref="T:System.Byte"/>[] array to compress and store in a zip item.</param>
    </member>
    <member name="P:DevExpress.Compression.ZipByteArrayItem.Content">
      <summary>
        <para>Gets or sets the content of the zip item created from the byte array.</para>
      </summary>
      <value>A <see cref="T:System.Byte"/>[] array of bytes that is the data for archiving.</value>
    </member>
    <member name="T:DevExpress.Compression.ZipDirectoryItem">
      <summary>
        <para>A zip item specific to the directory.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipDirectoryItem.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipDirectoryItem"/> class with the specified directory name.</para>
      </summary>
      <param name="name">A string that specifies the name of the zip item.</param>
      <param name="dirName">A string that specifies the name of the directory.</param>
    </member>
    <member name="P:DevExpress.Compression.ZipDirectoryItem.DirectoryName">
      <summary>
        <para>Gets or sets the name of a directory for the zip directory item.</para>
      </summary>
      <value>A string that is the directory name.</value>
    </member>
    <member name="T:DevExpress.Compression.ZipFileItem">
      <summary>
        <para>A zip item specific to the file source.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipFileItem.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipFileItem"/> class with the specified name and file name.</para>
      </summary>
      <param name="name">A string that specifies the name of the zip item.</param>
      <param name="fileName">A string that is the path to the file being archived.</param>
    </member>
    <member name="P:DevExpress.Compression.ZipFileItem.FileName">
      <summary>
        <para>Gets the name of the file from which a zip item is created.</para>
      </summary>
      <value>A string that is the file name.</value>
    </member>
    <member name="T:DevExpress.Compression.ZipItem">
      <summary>
        <para>An entry in the zip archive containing compressed data.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.Attributes">
      <summary>
        <para>Gets or sets attributes for a ZipItem that is originated from a file or directory, or that will be decompressed into a file or directory.</para>
      </summary>
      <value>A <see cref="T:System.IO.FileAttributes"/> enumeration that specifies attributes for files or directories.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.Comment">
      <summary>
        <para>Gets or sets a text comment for the zip item.</para>
      </summary>
      <value>A string that is stored in an archive as a comment to the zip item.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.CompressedSize">
      <summary>
        <para>Obtains the size of compressed data in a zip item.</para>
      </summary>
      <value>An integer that is the size of data in bytes.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.CreationTime">
      <summary>
        <para>Gets or sets the creation time for the zip item.</para>
      </summary>
      <value>A <see cref="T:System.DateTime"/> value that is the creation time.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.CreationTimeUtc">
      <summary>
        <para>Gets or sets the coordinated universal time value of the creation time for the zip item.</para>
      </summary>
      <value>A <see cref="T:System.DateTime"/> value that is the creation time value expressed in coordinated universal time (UTC).</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.Encoding">
      <summary>
        <para>Gets or sets the character encoding for the zip item.</para>
      </summary>
      <value>A <see cref="T:System.Text.Encoding"/> object that specifies character encoding. By default it is UTF-8.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.EncryptionType">
      <summary>
        <para>Gets or sets the encryption type for the zip item.</para>
      </summary>
      <value>An <see cref="T:DevExpress.Compression.EncryptionType"/> enumeration member specifying the encryption type. Default is <see cref="F:DevExpress.Compression.EncryptionType.None"/>.</value>
    </member>
    <member name="M:DevExpress.Compression.ZipItem.Extract">
      <summary>
        <para>Extracts an item from the archive to the current directory.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipItem.Extract(System.IO.Stream)">
      <summary>
        <para>Extracts an item from the archive to the specified stream.</para>
      </summary>
      <param name="stream">An <see cref="T:System.IO.Stream"/> object that is the stream to which the archive item is extracted.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipItem.Extract(System.String,DevExpress.Compression.AllowFileOverwriteMode)">
      <summary>
        <para>Extracts the current archive item as a file into the specified directory and enables you to define the behavior in case of a file name conflict.</para>
      </summary>
      <param name="directory">A string that is the path to the directory to which the files are extracted.</param>
      <param name="allowFileOverwrite">An <see cref="T:DevExpress.Compression.AllowFileOverwriteMode"/> enumeration member that specifies the behavior if a file name conflict occurs.</param>
    </member>
    <member name="M:DevExpress.Compression.ZipItem.Extract(System.String)">
      <summary>
        <para>Extracts archive item as a file to the specified directory.</para>
      </summary>
      <param name="directory">A string that is the path to the directory to which the files are extracted.</param>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.LastAccessTime">
      <summary>
        <para>Gets or sets the last access time for the zip item.</para>
      </summary>
      <value>A <see cref="T:System.DateTime"/> value that is the last access time.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.LastAccessTimeUtc">
      <summary>
        <para>Gets or sets the coordinated universal time value for the last access time for the zip item.</para>
      </summary>
      <value>A <see cref="T:System.DateTime"/> value that is the coordinated universal time (UTC) value for the last access time.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.LastWriteTime">
      <summary>
        <para>Gets or sets the last write time for the zip item.</para>
      </summary>
      <value>A <see cref="T:System.DateTime"/> value that is the last write time.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.LastWriteTimeUtc">
      <summary>
        <para>Gets or sets the coordinated universal time value for the last write time for the zip item.</para>
      </summary>
      <value>A <see cref="T:System.DateTime"/> value that is the coordinated universal time (UTC) value for the last write time.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.Name">
      <summary>
        <para>Gets or sets the name of the zip item.</para>
      </summary>
      <value>A string that is the name of the zip item.</value>
    </member>
    <member name="M:DevExpress.Compression.ZipItem.Open">
      <summary>
        <para>Obtains the unzipped data stream of the zip item.</para>
      </summary>
      <returns>A <see cref="T:System.IO.Stream"/> object that is the data stream.</returns>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.Password">
      <summary>
        <para>Gets or sets a password used for encrypting the content of a zip item.</para>
      </summary>
      <value>A string that specifies the password for encryption.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItem.UncompressedSize">
      <summary>
        <para>Obtains the size of uncompressed data in the zip item.</para>
      </summary>
      <value>An integer that is the size of uncompressed data in bytes.</value>
    </member>
    <member name="T:DevExpress.Compression.ZipItemAddingAction">
      <summary>
        <para>Lists a possible action when the ZipArchive.ItemAdding event is handled.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.ZipItemAddingAction.Cancel">
      <summary>
        <para>Cancel adding a current item to the archive and skip to the next item.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.ZipItemAddingAction.Continue">
      <summary>
        <para>Add the current item to the archive and move to the next item. Default value.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Compression.ZipItemAddingAction.Stop">
      <summary>
        <para>Stops adding items to archive.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Compression.ZipItemAddingEventArgs">
      <summary>
        <para>Provides data for the ZipArchive.ItemAdding event.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipItemAddingEventArgs.#ctor(DevExpress.Compression.ZipItem)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipItemAddingEventArgs"/> object with the specified zip item.</para>
      </summary>
      <param name="item">A <see cref="T:DevExpress.Compression.ZipItem"/> that is the zip item being added to the archive. This value is assigned to the <see cref="P:DevExpress.Compression.ZipItemAddingEventArgs.Item"/> property.</param>
    </member>
    <member name="P:DevExpress.Compression.ZipItemAddingEventArgs.Action">
      <summary>
        <para>Gets or sets the action required to perform after the ItemAdding event is handled.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Compression.ZipItemAddingAction"/> enumeration value specifying which action to perform.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipItemAddingEventArgs.Item">
      <summary>
        <para>Obtains the zip item being added to the archive.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Compression.ZipItem"/> descendant being added to the archive.</value>
    </member>
    <member name="T:DevExpress.Compression.ZipItemAddingEventHandler">
      <summary>
        <para>A method that will handle the <see cref="E:DevExpress.Compression.ZipArchive.ItemAdding"/> event.</para>
      </summary>
      <param name="sender">The event source. This parameter identifies the ZipArchive which raised the event.</param>
      <param name="args">A <see cref="T:DevExpress.Compression.ZipItemAddingEventArgs"/> object which contains event data.</param>
    </member>
    <member name="T:DevExpress.Compression.ZipStreamItem">
      <summary>
        <para>A zip item specific to the stream source.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipStreamItem.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipStreamItem"/> class with the specified name.</para>
      </summary>
      <param name="name">A string that specifies the name of the zip item.</param>
    </member>
    <member name="P:DevExpress.Compression.ZipStreamItem.ContentStream">
      <summary>
        <para>Gets or sets the content of the zip stream item.</para>
      </summary>
      <value>A <see cref="T:System.IO.Stream"/> object that is the content of a zip item.</value>
    </member>
    <member name="T:DevExpress.Compression.ZipTextItem">
      <summary>
        <para>A zip item specific to the text source.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Compression.ZipTextItem.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Compression.ZipTextItem"/> class with the specified name.</para>
      </summary>
      <param name="name">A string that specifies the name of the zip item.</param>
    </member>
    <member name="P:DevExpress.Compression.ZipTextItem.Content">
      <summary>
        <para>Gets or sets the content of the text zip item.</para>
      </summary>
      <value>A string that is the content of the zip item in the archive.</value>
    </member>
    <member name="P:DevExpress.Compression.ZipTextItem.ContentEncoding">
      <summary>
        <para>Gets or sets the character encoding of the text that is the content of a zip item.</para>
      </summary>
      <value>A <see cref="T:System.Text.Encoding"/> object that specifies the character encoding.</value>
    </member>
    <member name="N:DevExpress.Docs.Text">
      <summary>
        <para>Contains classes used by text utilities for document processing.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Docs.Text.EncodingDetector">
      <summary>
        <para>Provides the capability to detect text encoding.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Docs.Text.EncodingDetector"/> class with default settings.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.AnalyseData(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Performs encoding detection for the specified sequence of bytes in the byte array.</para>
      </summary>
      <param name="buffer">An array of bytes representing text for which encoding is detected.</param>
      <param name="from">An integer specifying the array index that is the beginning of the range.</param>
      <param name="length">An integer specifying the number of bytes in the range.</param>
      <returns>true if a certain encoding is recognized; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.BeginDetection">
      <summary>
        <para>Initializes an internal list of detectors for individual encodings and sets the initial detector state.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.Detect(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Detect character encoding of bytes in the specified range of an array.</para>
      </summary>
      <param name="buffer">An array of bytes representing text for which encoding is detected.</param>
      <param name="from">An integer specifying the array index that is the beginning of the range.</param>
      <param name="length">An integer specifying the number of bytes in the range.</param>
      <returns>An <see cref="T:System.Text.Encoding"/> object that is the detected encoding.</returns>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.Detect(System.Byte[])">
      <summary>
        <para>Detect character encoding of bytes in the specified range of an array.</para>
      </summary>
      <param name="buffer">An array of bytes representing text for which encoding is detected.</param>
      <returns>An <see cref="T:System.Text.Encoding"/> object that is the detected encoding.</returns>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.Detect(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
        <para>Detect character encoding of bytes in the specified stream.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> containing characters for which encoding is detected.</param>
      <param name="maxByteCount">An integer specifying the maximum number of bytes used for encoding detection.</param>
      <param name="keepPosition">true to start detection from the System.IO.Stream.Position offset; otherwise, false.</param>
      <returns>An <see cref="T:System.Text.Encoding"/> object that is the detected encoding.</returns>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.Detect(System.IO.Stream,System.Int32)">
      <summary>
        <para>Detect character encoding of bytes in the specified stream.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> containing characters for which encoding is detected.</param>
      <param name="maxByteCount">An integer specifying the maximum number of bytes used for encoding detection.</param>
      <returns>An <see cref="T:System.Text.Encoding"/> object that is the detected encoding.</returns>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.Detect(System.IO.Stream)">
      <summary>
        <para>Detect character encoding of bytes in the specified stream.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> containing characters for which encoding is detected.</param>
      <returns>An <see cref="T:System.Text.Encoding"/> object that is the detected encoding.</returns>
    </member>
    <member name="M:DevExpress.Docs.Text.EncodingDetector.EndDetection">
      <summary>
        <para>Returns the result of encoding detection.</para>
      </summary>
      <returns>An <see cref="T:System.Text.Encoding"/> object that is the detected encoding.</returns>
    </member>
    <member name="T:DevExpress.Docs.Text.INumberInWordsProvider">
      <summary>
        <para>Converts numbers to cardinal and ordinal numerals in different languages.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Docs.Text.INumberInWordsProvider.ConvertToText(System.Int64,DevExpress.Docs.Text.NumberCulture)">
      <summary>
        <para>Converts a number to text.</para>
      </summary>
      <param name="value">A <see cref="T:System.Int64"/> value to be converted to text.</param>
      <param name="language">A <see cref="T:DevExpress.Docs.Text.NumberCulture"/> enumeration member that specifies the language of the numerals.</param>
      <returns>A string that is the numeral corresponding to the specified number.</returns>
    </member>
    <member name="M:DevExpress.Docs.Text.INumberInWordsProvider.ConvertToText(System.Int64,System.Globalization.CultureInfo)">
      <summary>
        <para>Converts a number to text.</para>
      </summary>
      <param name="value">A <see cref="T:System.Int64"/> value to be converted to text.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that specifies the language of numerals.</param>
      <returns>A string that is the numeral corresponding to the specified number.</returns>
    </member>
    <member name="M:DevExpress.Docs.Text.INumberInWordsProvider.ConvertToText(System.Int64)">
      <summary>
        <para>Converts a number to text.</para>
      </summary>
      <param name="value">A <see cref="T:System.Int64"/> value to be converted to text.</param>
      <returns>A string that is the numeral corresponding to the specified number.</returns>
    </member>
    <member name="T:DevExpress.Docs.Text.NumberCulture">
      <summary>
        <para>Lists languages for which numbers can be converted to words.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.English">
      <summary>
        <para>English numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.English_UnitedKingdom">
      <summary>
        <para>English numerals (hundreds and tens are separated by “and”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.French">
      <summary>
        <para>French numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.German">
      <summary>
        <para>German numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Greek">
      <summary>
        <para>Greek numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Hindi">
      <summary>
        <para>Hindi numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Italian">
      <summary>
        <para>Italian numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.LatinLetter">
      <summary>
        <para>Latin Letter numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Portuguese">
      <summary>
        <para>Portuguese numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Roman">
      <summary>
        <para>Roman numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Russian">
      <summary>
        <para>Russian numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.RussianLetter">
      <summary>
        <para>Russian Letter numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Spanish">
      <summary>
        <para>Spanish numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Swedish">
      <summary>
        <para>Swedish numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Thai">
      <summary>
        <para>Thai numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Turkish">
      <summary>
        <para>Turkish numerals.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Docs.Text.NumberCulture.Ukrainian">
      <summary>
        <para>Ukrainian numerals.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Docs.Text.NumberInWords">
      <summary>
        <para>Provides access to static properties used to obtain a provider that converts numbers to words.</para>
        <para>You need an active DevExpress Office File API Subscription or DevExpress Universal Subscription to use these methods in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Docs.Text.NumberInWords.Cardinal">
      <summary>
        <para>Obtains the numbers-to-words converter for cardinal numbers (numbers which refer to the size of a group, simple numerals).</para>
      </summary>
      <value>An <see cref="T:DevExpress.Docs.Text.INumberInWordsProvider"/> object that is a numbers-to-words converter.</value>
    </member>
    <member name="P:DevExpress.Docs.Text.NumberInWords.Ordinal">
      <summary>
        <para>Obtains the numbers-to-words converter for ordinal numbers (numbers which refer to a position in a series).</para>
      </summary>
      <value>An <see cref="T:DevExpress.Docs.Text.INumberInWordsProvider"/> object that is a numbers-to-words converter.</value>
    </member>
    <member name="N:DevExpress.Office.DigitalSignatures">
      <summary>
        <para>Contains classes used to create signatures for PDF and Office documents.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.CommitmentType">
      <summary>
        <para>Contains properties used to specify the signer’s commitment type.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.CommitmentType.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.CommitmentType"/> class with specified settings.</para>
      </summary>
      <param name="id">The commitment object identifier.</param>
      <param name="description">Additional commitment information.</param>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.CommitmentType.Description">
      <summary>
        <para>Gets additional commitment information.</para>
      </summary>
      <value>The commitment description.</value>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.CommitmentType.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object is equal to the current CommitmentType object.</para>
      </summary>
      <param name="obj">A commitment type to compare with the current object.</param>
      <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.CommitmentType.GetHashCode">
      <summary>
        <para>Returns a number that identifies the object instance.</para>
      </summary>
      <returns>The hash code for the current object.</returns>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.CommitmentType.Id">
      <summary>
        <para>Obtains the commitment object identifier.</para>
      </summary>
      <value>The commitment object ID.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.CommitmentType.ProofOfApproval">
      <summary>
        <para>Obtains the Proof of Approval commitment type (the signer approved the content of the signed data object) parameters.</para>
      </summary>
      <value>An object that contains the Proof of Approval type identifier and description.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.CommitmentType.ProofOfCreation">
      <summary>
        <para>Obtains the Proof of Creation commitment type (the signer created the content of the signed data object) parameters.</para>
      </summary>
      <value>An object that contains the Proof of Creation type identifier and description.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.CommitmentType.ProofOfDelivery">
      <summary>
        <para>Obtains the Proof of Delivery commitment type (The TSP delivered a signed data object in a local store and the recipient can access the object) parameters.</para>
      </summary>
      <value>An object that contains the Proof of Delivery type identifier and description.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.CommitmentType.ProofOfOrigin">
      <summary>
        <para>Obtains the Proof of Origin commitment type (the signer accepts that they created, approved and sent the signed data object) parameters.</para>
      </summary>
      <value>An object that contains the Proof of Origin type identifier and description.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.CommitmentType.ProofOfReceipt">
      <summary>
        <para>Obtains the Proof of Receipt commitment type (the signer confirms that they received the content of the signed data object) parameters.</para>
      </summary>
      <value>An object that contains the Proof of Receipt type identifier and description.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.CommitmentType.ProofOfSender">
      <summary>
        <para>Obtains the Proof of Sender commitment type (the signed data object was sent) parameters.</para>
      </summary>
      <value>An object that contains the Proof of Sender type identifier and description.</value>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.DocumentSigner">
      <summary>
        <para>Allows you to sign Office documents and validate signatures.</para>
        <para>You need an active DevExpress Office File API Subscription or DevExpress Universal Subscription to use these methods in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.DocumentSigner.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.DocumentSigner"/> class.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.DocumentSigner.RemoveSignatures(System.IO.Stream,System.IO.Stream)">
      <summary>
        <para>Removes signatures from a stream and saves the result.</para>
      </summary>
      <param name="inputStream">The stream that contains a target file.</param>
      <param name="outputStream">The stream to which to save the result.</param>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.DocumentSigner.RemoveSignatures(System.String,System.String)">
      <summary>
        <para>Removes signatures from a file and saves the result.</para>
      </summary>
      <param name="inputFileName">The path to a target file.</param>
      <param name="outputFileName">The path to a file where the result should be saved.</param>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.DocumentSigner.Sign(System.IO.Stream,System.IO.Stream,DevExpress.Office.DigitalSignatures.SignatureOptions,DevExpress.Office.DigitalSignatures.SignatureInfo)">
      <summary>
        <para>Signs a file with the specified signature and signature options.</para>
      </summary>
      <param name="inputStream">The stream that contains a file to sign.</param>
      <param name="outputStream">The stream to which to save the file.</param>
      <param name="options">An object that contains signature options.</param>
      <param name="signatureInfo">An object that contains the signature information.</param>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.DocumentSigner.Sign(System.String,System.String,DevExpress.Office.DigitalSignatures.SignatureOptions,DevExpress.Office.DigitalSignatures.SignatureInfo)">
      <summary>
        <para>Signs a file with the specified signature and signature options.</para>
      </summary>
      <param name="inputFileName">The path to a file to be signed.</param>
      <param name="outputFileName">The path to a file into which to save the result.</param>
      <param name="options">An object that contains signature options.</param>
      <param name="signatureInfo">An object that contains the signature information.</param>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.DocumentSigner.Validate(System.IO.Stream,DevExpress.Office.DigitalSignatures.SignatureValidationOptions)">
      <summary>
        <para>Validates a signature in the specified stream with the specified options.</para>
      </summary>
      <param name="inputStream">The stream that contains a file to validate.</param>
      <param name="options">An object that contains signature validation options.</param>
      <returns>An object that contains validation information.</returns>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.DocumentSigner.Validate(System.String,DevExpress.Office.DigitalSignatures.SignatureValidationOptions)">
      <summary>
        <para>Validates a signature in the specified file with the specified options.</para>
      </summary>
      <param name="inputFileName">A name of a file with a signature (including the full path).</param>
      <param name="options">An object that contains validation options.</param>
      <returns>An object that contains validation information.</returns>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.PackageSignatureValidation">
      <summary>
        <para>Contains the validation information.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.PackageSignatureValidation.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.PackageSignatureValidation"/> class.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.PackageSignatureValidation.Items">
      <summary>
        <para>Retrieves a list of items with detailed validation information.</para>
      </summary>
      <value>A list of objects with validation information.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.PackageSignatureValidation.Result">
      <summary>
        <para>Retrieves the signature validation result.</para>
      </summary>
      <value>An enumeration value that indicates the validation result.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.PackageSignatureValidation.ResultMessage">
      <summary>
        <para>Obtains the validation result message.</para>
      </summary>
      <value>The result message.</value>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.PackageSignatureValidationResult">
      <summary>
        <para>Lists values used to specify the signature validation result.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.PackageSignatureValidationResult.Invalid">
      <summary>
        <para>The package signature is invalid.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.PackageSignatureValidationResult.None">
      <summary>
        <para>No validation result.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.PackageSignatureValidationResult.PackageOpenFailed">
      <summary>
        <para>Failed to open the target package.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.PackageSignatureValidationResult.PartiallyValid">
      <summary>
        <para>The package signature is partially valid.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.PackageSignatureValidationResult.SignaturesNotFound">
      <summary>
        <para>The target package does not contain any signatures.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.PackageSignatureValidationResult.Valid">
      <summary>
        <para>The package signature is valid.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignatureCheckResult">
      <summary>
        <para>Contains signature check result details.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.SignatureCheckResult.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.SignatureCheckResult"/> class.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureCheckResult.CheckType">
      <summary>
        <para>Gets the type of the signature verification.</para>
      </summary>
      <value>An enumeration value that indicates the signature check type.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureCheckResult.Info">
      <summary>
        <para>Gets or sets the check result information.</para>
      </summary>
      <value>The object that contains the check result information.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureCheckResult.IsPassed">
      <summary>
        <para>Gets whether the signature passed the check.</para>
      </summary>
      <value>true if the signature passed the check; otherwise, false.</value>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignatureCheckType">
      <summary>
        <para>Lists values used to specify the signature validation type.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.All">
      <summary>
        <para>All check types.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.None">
      <summary>
        <para>No check.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.PackageFileFound">
      <summary>
        <para>Checks whether the package file is found.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.PackageFileHashVerified">
      <summary>
        <para>Checks whether the package file’s hash is verified.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.SignatureCertificateKeyUsageValid">
      <summary>
        <para>Checks whether the contents of the certificate’s Key Usage extension complies with the certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.SignatureCertificateNodeFound">
      <summary>
        <para>Checks whether the signature certificate node is found.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.SignatureCertificateValid">
      <summary>
        <para>Checks whether the signature certificate is valid.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.SignatureCertificateValidityPeriodCheck">
      <summary>
        <para>Checks whether the certificate has expired or its validity period has not started yet.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.SignatureFileFound">
      <summary>
        <para>Checks whether the signature file is in the package.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.SignatureIntegrityCheck">
      <summary>
        <para>Checks the signature integrity.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.SignatureXmlNodeFound">
      <summary>
        <para>Checks whether the signature XML node is found.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.TimestampAndSignatureMatch">
      <summary>
        <para>Checks whether the timestamp matches the signature.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.TimestampCertificateKeyUsageValid">
      <summary>
        <para>Checks whether the contents of the timestamp certificate’s Key Usage extension complies with the certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.TimestampCertificateValid">
      <summary>
        <para>Checks whether the timestamp certificate is valid.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.TimestampCertificateValidityPeriodCheck">
      <summary>
        <para>Checks whether the timestamp’s certificate’s validity period is active.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.TimestampSignerCertificateFound">
      <summary>
        <para>Checks whether the timestamp signer’s certificate is found.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureCheckType.TimestampSignerValid">
      <summary>
        <para>Checks whether the timestamp signer is valid.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignatureFlags">
      <summary>
        <para>Lists values used to specify additional signature creation stages.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.All">
      <summary>
        <para>Perform all actions in this list.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.EmbedCertificateChain">
      <summary>
        <para>Embed the whole certificate chain, including the root certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.EmbedCertificateCRL">
      <summary>
        <para>Embed the whole certificate revocation list (CRL) for a certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.EmbedCertificateOCSP">
      <summary>
        <para>Embed the Online Certificate Status Protocol (OCSP) request for a certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.EmbedTimestampCertificateChain">
      <summary>
        <para>Embed the whole timestamp certificate chain, including the root certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.EmbedTimestampCertificateCRL">
      <summary>
        <para>Embed the whole certificate revocation list (CRL) for a timestamp certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.EmbedTimestampCertificateOCSP">
      <summary>
        <para>Embed the Online Certificate Status Protocol (OCSP) request for a timestamp certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.IncludeTimestamp">
      <summary>
        <para>Include a timestamp in a signature.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.None">
      <summary>
        <para>No action is required.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureFlags.ValidateCertificate">
      <summary>
        <para>Validate a certificate before adding it to the signature.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignatureInfo">
      <summary>
        <para>Contains signer information (claimed roles, commitment type, etc.)</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.SignatureInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.SignatureInfo"/> class.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.Address1">
      <summary>
        <para>Gets or sets the first address line of the production place.</para>
      </summary>
      <value>The first address line.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.Address2">
      <summary>
        <para>Gets or sets the second address line of the production place.</para>
      </summary>
      <value>The second address line.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.City">
      <summary>
        <para>Specifies the city where the signature was applied.</para>
      </summary>
      <value>The city name.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.ClaimedRoles">
      <summary>
        <para>Gets the singer’s claimed roles or titles.</para>
      </summary>
      <value>A list of claimed roles/titles.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.Comments">
      <summary>
        <para>Gets or sets the purpose for signing the file.</para>
      </summary>
      <value>The signing purpose.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.CommitmentType">
      <summary>
        <para>Gets or sets the commitment type that represents the signer’s role.</para>
      </summary>
      <value>An enumeration value that indicates the commitment type.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.Country">
      <summary>
        <para>Gets or sets the country where the production was placed.</para>
      </summary>
      <value>The country associated with the signer’s identity.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.Policy">
      <summary>
        <para>Gets the signature policy options.</para>
      </summary>
      <value>An object that contains signature policy options.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.PostalCode">
      <summary>
        <para>Gets or sets the postal code of a production place.</para>
      </summary>
      <value>The postal code.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.StateOrProvince">
      <summary>
        <para>Gets or sets the state or province associated with the production place.</para>
      </summary>
      <value>The state or province.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.Text">
      <summary>
        <para>Gets or sets the signature description.</para>
      </summary>
      <value>The signature description.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureInfo.Time">
      <summary>
        <para>Gets or sets the time when the document was signed.</para>
      </summary>
      <value>The signing date and time.</value>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignatureOptions">
      <summary>
        <para>Contains signature options.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.SignatureOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.SignatureOptions"/> class.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.Certificate">
      <summary>
        <para>Gets or sets the signature certificate.</para>
      </summary>
      <value>An X.509 signature certificate.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.CertificateKeyUsageFlags">
      <summary>
        <para>Gets or sets how the certificate key can be used.</para>
      </summary>
      <value>An enumeration value that indicates the certificate key usage.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.CertificatePolicy">
      <summary>
        <para>Specifies the chain policy used to build an X509 certificate chain.</para>
      </summary>
      <value>An object that contains the X.509 certificate chain policy.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.CrlClient">
      <summary>
        <para>Gets or sets an object that performs a Certificate Revocation List (CRL) request for a signature certificate.</para>
      </summary>
      <value>An object that allows you to send a CLR request for a certificate.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.DecryptionPassword">
      <summary>
        <para>Gets or sets a password used to open an encrypted a document.</para>
      </summary>
      <value>The password string.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.DigestMethod">
      <summary>
        <para>Gets or sets the signature digest method (the algorithm used to hash the signature).</para>
      </summary>
      <value>An enumeration value that indicates the digest method.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.OcspClient">
      <summary>
        <para>Gets or sets the object used to send an Online Certificate Status Protocol (OCSP) request for a signature certificate.</para>
      </summary>
      <value>An object that returns Online Certificate Status Protocol (OCSP) response for a certificate chain.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.SignatureFlags">
      <summary>
        <para>Gets or sets the flags that specify additional signature creation actions.</para>
      </summary>
      <value>An enumeration value that indicates additional signature creation actions.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.TimestampCertificatePolicy">
      <summary>
        <para>Specifies the chain policy applied when building a timestamp certificate chain.</para>
      </summary>
      <value>An object that contains the X.509 certificate chain policy.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureOptions.TsaClient">
      <summary>
        <para>Gets or sets a timestamp client.</para>
      </summary>
      <value>An object that provides a timestamp.</value>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignaturePolicy">
      <summary>
        <para>Contains signature policy options.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.SignaturePolicy.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.SignaturePolicy"/> class.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignaturePolicy.Description">
      <summary>
        <para>Gets or sets the policy description.</para>
      </summary>
      <value>The policy description.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignaturePolicy.DigestMethod">
      <summary>
        <para>Gets or sets the signature digest method (the algorithm used to hash the policy).</para>
      </summary>
      <value>An enumeration value that indicates the digest method.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignaturePolicy.DigestValue">
      <summary>
        <para>Gets or sets the policy digest value.</para>
      </summary>
      <value>The digest value.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignaturePolicy.Identifier">
      <summary>
        <para>Gets or sets the explicit and unambiguous identifier of a signature policy.</para>
      </summary>
      <value>The policy identifier.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignaturePolicy.IsImplied">
      <summary>
        <para>Gets or sets whether or not the implied way to identify the signature policy is used instead of the identifier and hash value.</para>
      </summary>
      <value>true, if the policy is according to national laws, private contractual agreements or signed data object; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignaturePolicy.Transformations">
      <summary>
        <para>Gets transformations applied to the policy XML file before computing its hash.</para>
      </summary>
      <value>A list of policy transformations.</value>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignatureValidationInfo">
      <summary>
        <para>Contains signature validation information.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.SignatureValidationInfo"/> class.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.Certificate">
      <summary>
        <para>Gets the signature certificate.</para>
      </summary>
      <value>A signature certificate.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.CheckDetails">
      <summary>
        <para>Gets a list of validation check details.</para>
      </summary>
      <value>A list of objects that contains information on signature checks.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.FailedCheckDetails">
      <summary>
        <para>Retrieves a list of information on checks that the signature failed.</para>
      </summary>
      <value>A list of items that contain information on failed checks.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.FailedChecks">
      <summary>
        <para>Obtains the check types that the signature failed to pass.</para>
      </summary>
      <value>Enumeration values that indicate failed checks.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.PassedCheckDetails">
      <summary>
        <para>Retrieves a list of information on checks that the signature passed.</para>
      </summary>
      <value>A list of items that contain information on passed checks.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.PassedChecks">
      <summary>
        <para>Obtains the check types that the signature passed.</para>
      </summary>
      <value>Enumeration values that indicate passed checks.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.SignatureFileName">
      <summary>
        <para>Gets the name of a signature in a package.</para>
      </summary>
      <value>The signature file name.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.SignatureInfo">
      <summary>
        <para>Obtains signature information.</para>
      </summary>
      <value>An object that contains signature information.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.SignatureTimestamp">
      <summary>
        <para>Gets the date and time of the signature timestamp.</para>
      </summary>
      <value>The date and time the timestamp was applied.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.SignatureTimestampCertificates">
      <summary>
        <para>Obtains the list of timestamp certificates.</para>
      </summary>
      <value>A list of timestamp certificates.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.SignatureXml">
      <summary>
        <para>Gets a signature as an XML string.</para>
      </summary>
      <value>A signature XML string.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.ValidationResult">
      <summary>
        <para>Gets the signature validation result.</para>
      </summary>
      <value>An enumeration value that indicates the validation result.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationInfo.ValidationResultMessage">
      <summary>
        <para>Gets the validation result message.</para>
      </summary>
      <value>The validation result message.</value>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignatureValidationOptions">
      <summary>
        <para>Contains signature validation options.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Office.DigitalSignatures.SignatureValidationOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Office.DigitalSignatures.SignatureValidationOptions"/> class.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationOptions.CertificateKeyUsageFlags">
      <summary>
        <para>Gets or sets how the certificate key can be used.</para>
      </summary>
      <value>An enumeration value that indicates the certificate key usage.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationOptions.CertificatePolicy">
      <summary>
        <para>Specifies the chain policy used to validate an X509 certificate chain.</para>
      </summary>
      <value>An object that contains the X.509 certificate chain policy.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationOptions.DecryptionPassword">
      <summary>
        <para>Gets or sets a password used to open an encrypted a document.</para>
      </summary>
      <value>The password string.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationOptions.TimestampCertificatePolicy">
      <summary>
        <para>Specifies the chain policy applied when building a timestamp certificate chain.</para>
      </summary>
      <value>An object that contains the X.509 certificate chain policy.</value>
    </member>
    <member name="P:DevExpress.Office.DigitalSignatures.SignatureValidationOptions.ValidationFlags">
      <summary>
        <para>Specifies the validation flags.</para>
      </summary>
      <value>An enumeration value that indicates a validation flag.</value>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.SignatureValidationResult">
      <summary>
        <para>Lists values used to specify the signature validation result.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureValidationResult.Invalid">
      <summary>
        <para>The signature is invalid.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureValidationResult.None">
      <summary>
        <para>No result.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.SignatureValidationResult.Valid">
      <summary>
        <para>The signature is valid.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Office.DigitalSignatures.ValidationFlags">
      <summary>
        <para>Lists values used to specify validation flags.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.ValidationFlags.All">
      <summary>
        <para>All flags.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.ValidationFlags.None">
      <summary>
        <para>No flags.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.ValidationFlags.ValidatePackageIntegrity">
      <summary>
        <para>Validate package integrity.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.ValidationFlags.ValidateSignature">
      <summary>
        <para>Validate a signature.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.ValidationFlags.ValidateSignatureCertificate">
      <summary>
        <para>Validate the signature certificate.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.ValidationFlags.ValidateTimestamp">
      <summary>
        <para>Validate a timestamp.</para>
      </summary>
    </member>
    <member name="F:DevExpress.Office.DigitalSignatures.ValidationFlags.ValidateTimestampCertificate">
      <summary>
        <para>Validate the timestamp certificate.</para>
      </summary>
    </member>
    <member name="N:DevExpress.Pdf">
      <summary>
        <para>Contains classes and enumerations that are used to implement the main functionality of WinForms and WPF PDF Viewers, and the PDF Document API.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Pdf.PdfDeferredSigner">
      <summary>
        <para>Allows you to sign the document hash.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Pdf.PdfDeferredSigner.HashValue">
      <summary>
        <para>Returns the document hash value.</para>
      </summary>
      <value>The document hash.</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDeferredSigner.Sign(System.IO.Stream,System.Byte[])">
      <summary>
        <para>Writes the signature contents and saves the signed document to the specified stream.</para>
      </summary>
      <param name="stream">The stream to which to save the document.</param>
      <param name="signatureValue">A DER-encoded PKCS#7 object, a DER-encoded CMS SignedData object or a TimeStampToken object (RFC 3161).</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDeferredSigner.Sign(System.String,System.Byte[])">
      <summary>
        <para>Writes the signature contents and saves the signed document to the specified file.</para>
      </summary>
      <param name="filePath">The path to the file to which to save the document.</param>
      <param name="signatureValue">A DER-encoded PKCS#7 object, a DER-encoded CMS SignedData object or a TimeStampToken object (RFC 3161).</param>
    </member>
    <member name="T:DevExpress.Pdf.PdfDocumentProcessor">
      <summary>
        <para>A non-visual component that allows you to generate PDF files from scratch and manipulate existing documents.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Pdf.PdfDocumentProcessor"/> class with default settings.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddFormFields(DevExpress.Pdf.PdfAcroFormField[])">
      <summary>
        <para>Adds interactive form fields to a PDF document.</para>
      </summary>
      <param name="fields">A <see cref="T:DevExpress.Pdf.PdfAcroFormField"/> array containing form fields that should be added to a PDF document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddFormFields(System.Collections.Generic.IEnumerable{DevExpress.Pdf.PdfAcroFormField})">
      <summary>
        <para>Adds interactive form fields to a PDF document.</para>
      </summary>
      <param name="fields">A collection of <see cref="T:DevExpress.Pdf.PdfAcroFormField"/> objects that represent interactive form fields that should be added to a PDF document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddNewPage(DevExpress.Pdf.PdfRectangle)">
      <summary>
        <para>Adds an empty page to the  document. Accepts page size as a parameter.</para>
      </summary>
      <param name="mediaBox">A <see cref="T:DevExpress.Pdf.PdfRectangle"/> object that is the actual page size.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfPage"/> object that is the added page.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddTextAnnotation(System.Int32,DevExpress.Pdf.PdfPoint)">
      <summary>
        <para>Adds a text annotation at the specified point on the page.</para>
      </summary>
      <param name="pageNumber">The number of the page to add the text annotation.</param>
      <param name="location">The point on the page to position the text annotation.</param>
      <returns>The text annotation.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddTextAnnotation(System.Int32,DevExpress.Pdf.PdfRectangle)">
      <summary>
        <para>Adds a text annotation to the specified area on the page.</para>
      </summary>
      <param name="pageNumber">The number of the page to add the text annotation.</param>
      <param name="bounds">A page area to add the text annotation.</param>
      <returns>The text annotation.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddTextMarkupAnnotation(DevExpress.Pdf.PdfDocumentArea,DevExpress.Pdf.PdfTextMarkupAnnotationType)">
      <summary>
        <para>Creates a text markup annotation for the text located in the specified page area.</para>
      </summary>
      <param name="area">The document area where the annotation should be located.</param>
      <param name="style">The text markup annotation type.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfTextMarkupAnnotationData"/> object that represents the created text markup annotation on a page.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddTextMarkupAnnotation(DevExpress.Pdf.PdfDocumentPosition,DevExpress.Pdf.PdfDocumentPosition,DevExpress.Pdf.PdfTextMarkupAnnotationType)">
      <summary>
        <para>Creates a text markup annotation for text located between the specified positions on the page.</para>
      </summary>
      <param name="startPosition">The start point of a page area that should be annotated.</param>
      <param name="endPosition">The end point of a page area that should be annotated.</param>
      <param name="style">The text markup annotation type.</param>
      <returns>The text markup annotation.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddTextMarkupAnnotation(System.Int32,DevExpress.Pdf.PdfOrientedRectangle,DevExpress.Pdf.PdfTextMarkupAnnotationType)">
      <summary>
        <para>Creates a text markup annotation at the specified page area.</para>
      </summary>
      <param name="pageNumber">The number of the page where the annotation should be added.</param>
      <param name="textRectangle">A rectangle that specifies a page area where the annotation should be located.</param>
      <param name="style">The text markup annotation type.</param>
      <returns>A text markup annotation.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddTextMarkupAnnotation(System.Int32,DevExpress.Pdf.PdfRectangle,DevExpress.Pdf.PdfTextMarkupAnnotationType)">
      <summary>
        <para>Creates a text markup annotation for the text located in the specified page rectangle.</para>
      </summary>
      <param name="pageNumber">The number of a page where the annotation should be added.</param>
      <param name="rectangle">The rectangle with the text that should be annotated.</param>
      <param name="style">The text markup annotation type.</param>
      <returns>The text markup annotation.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddTextMarkupAnnotation(System.Int32,System.Collections.Generic.IEnumerable{DevExpress.Pdf.PdfOrientedRectangle},DevExpress.Pdf.PdfTextMarkupAnnotationType)">
      <summary>
        <para>Creates a text markup annotation at the specified area on the page.</para>
      </summary>
      <param name="pageNumber">The number of the page where the annotation should be added.</param>
      <param name="textRectangles">A collection of rectangles that specify a page area where the annotation should be located.</param>
      <param name="style">The text markup annotation type.</param>
      <returns>The text markup annotation.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AddTextMarkupAnnotation(System.Int32,System.Collections.Generic.IEnumerable{DevExpress.Pdf.PdfQuadrilateral},DevExpress.Pdf.PdfTextMarkupAnnotationType)">
      <summary>
        <para>Creates a text markup annotation at the specified page area.</para>
      </summary>
      <param name="pageNumber">The number of the page where the annotation should be added.</param>
      <param name="quads">A collection of quadrilaterals used to specify the text markup annotation bounds.</param>
      <param name="style">The text markup annotation type.</param>
      <returns>A text markup annotation.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AppendDocument(System.IO.Stream)">
      <summary>
        <para>Appends a PDF document located at the specified file stream to the end of the current document starting from the new page.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> value, specifying the location of the appended document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AppendDocument(System.String)">
      <summary>
        <para>Appends a PDF document located at the specified path to the end of the current document starting from the new page.</para>
      </summary>
      <param name="path">A <see cref="T:System.String"/> value, specifying the location of the appended document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.ApplyFormData(DevExpress.Pdf.PdfFormData)">
      <summary>
        <para>Fills an interactive form with data.</para>
      </summary>
      <param name="data">A <see cref="T:DevExpress.Pdf.PdfFormData"/> object containing data to be applied to a form.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.AttachFile(DevExpress.Pdf.PdfFileAttachment)">
      <summary>
        <para>Attaches a file to the PDF document.</para>
      </summary>
      <param name="attachment">A <see cref="T:DevExpress.Pdf.PdfFileAttachment"/> object that contains settings to attach a file to the PDF document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CheckFormFieldNameCollisions(DevExpress.Pdf.PdfAcroFormField[])">
      <summary>
        <para>Checks interactive form fields to find a collision in the form field names.</para>
      </summary>
      <param name="fields">A <see cref="T:DevExpress.Pdf.PdfAcroFormField"/> array of interactive form fields to check.</param>
      <returns>A collection of <see cref="T:DevExpress.Pdf.PdfAcroFormFieldNameCollision"/> objects that contains information about a collision found in interactive form field names.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CheckFormFieldNameCollisions(System.Collections.Generic.IEnumerable{DevExpress.Pdf.PdfAcroFormField})">
      <summary>
        <para>Checks interactive form fields to find a collision in the form field names.</para>
      </summary>
      <param name="fields">A list of <see cref="T:DevExpress.Pdf.PdfAcroFormField"/> objects containing interactive form fields that should be checked to find a collision in the form field names.</param>
      <returns>A collection of <see cref="T:DevExpress.Pdf.PdfAcroFormFieldNameCollision"/> objects  that contains information about a collision found in interactive form field names.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CloseDocument">
      <summary>
        <para>Closes the current document.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateBitmap(System.Int32,DevExpress.Pdf.PdfPageRenderingParameters)">
      <summary>
        <para>Exports a PDF page to a bitmap image with specified rendering parameters.</para>
      </summary>
      <param name="pageNumber">A page number.</param>
      <param name="options">An object that contains page rendering parameters.</param>
      <returns>The converted page.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateBitmap(System.Int32,System.Int32)">
      <summary>
        <para>Exports a PDF page to a bitmap image.</para>
      </summary>
      <param name="pageNumber">A page number.</param>
      <param name="largestEdgeLength">A length of the image’s largest dimension, in pixels.</param>
      <returns>The converted page.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateDestination(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a destination for targets in the document (e.g., bookmarks) using a page number, page coordinates, DPI and zoom factor.</para>
      </summary>
      <param name="pageNumber">An integer value that is the page number where the destination is created.</param>
      <param name="x">A <see cref="T:System.Single"/> object that is the horizontal page coordinate value.</param>
      <param name="y">A <see cref="T:System.Single"/> object that is the vertical page coordinate value.</param>
      <param name="dpiX">A <see cref="T:System.Single"/> object that is the value, in dots per inch, for the horizontal resolution.</param>
      <param name="dpiY">A <see cref="T:System.Single"/> object that is the value, in dots per inch, for the vertical resolution.</param>
      <param name="zoomFactor">The zoom level  by which a page destination is created.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfDestination"/> object that is the page destination.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateDestination(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a destination for targets in the document (e.g., bookmarks) using a page number, page coordinates, and DPI.</para>
      </summary>
      <param name="pageNumber">An integer value that is the page number where the destination is created.</param>
      <param name="x">A <see cref="T:System.Single"/> object that is the horizontal page coordinate value.</param>
      <param name="y">A <see cref="T:System.Single"/> object that is the vertical page coordinate value.</param>
      <param name="dpiX">A <see cref="T:System.Single"/> object that is the value, in dots per inch, for the horizontal resolution.</param>
      <param name="dpiY">A <see cref="T:System.Single"/> object that is the value, in dots per inch, for the vertical resolution.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfDestination"/> object that is the page destination.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateDestination(System.Int32,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a destination for targets in the document (e.g., bookmarks) using a page number, page coordinates, and zoom factor.</para>
      </summary>
      <param name="pageNumber">An integer value that is the page number where the destination is created.</param>
      <param name="x">A <see cref="T:System.Single"/> object that is the horizontal page coordinate value.</param>
      <param name="y">A <see cref="T:System.Single"/> object that is the vertical page coordinate value.</param>
      <param name="zoomFactor">The zoom level by which a page destination is created.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfDestination"/> object that is the page destination.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateDestination(System.Int32,System.Single,System.Single)">
      <summary>
        <para>Creates a destination for targets in the document (e.g., bookmarks) using a page number, and page coordinates.</para>
      </summary>
      <param name="pageNumber">An integer value that is the page number where the destination is created.</param>
      <param name="x">A <see cref="T:System.Single"/> object that is the horizontal page coordinate value.</param>
      <param name="y">A <see cref="T:System.Single"/> object that is the vertical page coordinate value.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfDestination"/> object that is the page destination.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateDestination(System.Int32,System.Single)">
      <summary>
        <para>Creates a destination for targets in the document (e.g., bookmarks) using a page number, and zoom factor.</para>
      </summary>
      <param name="pageNumber">An integer value that is the page number where the destination is created.</param>
      <param name="zoomFactor">The zoom level  by which a page destination is created.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfDestination"/> object that is the page destination.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateDestination(System.Int32)">
      <summary>
        <para>Creates a destination for targets in the document (e.g., bookmarks) using a page number.</para>
      </summary>
      <param name="pageNumber">An integer value that is the page number where the destination is created.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfDestination"/> object that is the page destination.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument">
      <summary>
        <para>Creates an empty PDF document with no pages.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument(System.IO.Stream,DevExpress.Pdf.PdfCreationOptions)">
      <summary>
        <para>Creates an empty PDF with no pages using a stream and PDF creation options.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> class descendant specifying the stream to which the PDF empty document should be written.</param>
      <param name="creationOptions">A <see cref="T:DevExpress.Pdf.PdfCreationOptions"/> object that contains PDF compatibility and font embedding options.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument(System.IO.Stream,DevExpress.Pdf.PdfSaveOptions,DevExpress.Pdf.PdfCreationOptions)">
      <summary>
        <para>Creates an empty PDF document with no pages with specified save (encryption settings and a signature) and creation options, and writes it to a stream.</para>
      </summary>
      <param name="stream">A stream to which the PDF empty document should be written.</param>
      <param name="saveOptions">An object that contains settings to encrypt and sign an empty document.</param>
      <param name="creationOptions">An object that contains PDF compatibility and font embedding options.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument(System.IO.Stream,DevExpress.Pdf.PdfSaveOptions)">
      <summary>
        <para>Creates an empty PDF document with no pages with specified save options (encryption and signature settings) and writes it to a stream.</para>
      </summary>
      <param name="stream">A stream to write the empty PDF document.</param>
      <param name="saveOptions">An object that contains settings to encrypt an empty document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument(System.IO.Stream)">
      <summary>
        <para>Creates an empty PDF document with no pages and writes it to a stream.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> class descendant specifying the stream to which the PDF empty document should be written.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument(System.String,DevExpress.Pdf.PdfCreationOptions)">
      <summary>
        <para>Creates an empty PDF document with no pages using the file path and PDF creation options.</para>
      </summary>
      <param name="path">A string that is the full path to the PDF document file.</param>
      <param name="creationOptions">A <see cref="T:DevExpress.Pdf.PdfCreationOptions"/> object that contains PDF compatibility and font embedding options.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument(System.String,DevExpress.Pdf.PdfSaveOptions,DevExpress.Pdf.PdfCreationOptions)">
      <summary>
        <para>Creates an empty PDF document with no pages using the file path, PDF save options (containing encryption settings and a signature) that will be applied to the document when it is saved, and PDF creation options.</para>
      </summary>
      <param name="path">A string that is the full path to the PDF document file.</param>
      <param name="saveOptions">A <see cref="T:DevExpress.Pdf.PdfSaveOptions"/> object that contains settings to encrypt and sign an empty document.</param>
      <param name="creationOptions">A <see cref="T:DevExpress.Pdf.PdfCreationOptions"/> object that contains PDF compatibility and font embedding options.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument(System.String,DevExpress.Pdf.PdfSaveOptions)">
      <summary>
        <para>Creates an empty PDF document with no pages using the file path and PDF save options (containing encryption settings and a signature) that will be applied to the document when it is saved.</para>
      </summary>
      <param name="path">A string that is the full path to the PDF document file.</param>
      <param name="saveOptions">A <see cref="T:DevExpress.Pdf.PdfSaveOptions"/> object that contains settings to encrypt and sign an empty document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateEmptyDocument(System.String)">
      <summary>
        <para>Creates an empty PDF document with no pages using the file path.</para>
      </summary>
      <param name="path">A string that is the full path to the PDF document file.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateGraphics">
      <summary>
        <para>Creates a new instance of the <see cref="T:DevExpress.Pdf.PdfGraphics"/> used to draw graphics on a PDF document.</para>
      </summary>
      <returns>A <see cref="T:DevExpress.Pdf.PdfGraphics"/> object used as a drawing context.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateTiff(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Int32},System.Single)">
      <summary>
        <para>Exports PDF pages to a multi-page TIFF image with a predefined resolution and writes the image to a stream.</para>
      </summary>
      <param name="stream">A stream to which a TIFF image should be written.</param>
      <param name="pageNumbers">A list of page numbers.</param>
      <param name="imageDpi">Image DPI.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateTiff(System.IO.Stream,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <para>Exports PDF pages to a multi-page TIFF image and writes the image to a stream.</para>
      </summary>
      <param name="stream">A stream to which the TIFF image should be written.</param>
      <param name="largestEdgeLength">A length of the image’s largest dimension, in pixels.</param>
      <param name="pageNumbers">A list of page numbers.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateTiff(System.IO.Stream,System.Int32)">
      <summary>
        <para>Exports a PDF file to a multi-page TIFF image and writes the image to a stream.</para>
      </summary>
      <param name="stream">A stream to which a TIFF image should be written.</param>
      <param name="largestEdgeLength">A length of the image’s largest dimension, in pixels.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateTiff(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Single)">
      <summary>
        <para>Exports PDF pages to a multi-page TIFF image with a predefined resolution and saves the image to a file.</para>
      </summary>
      <param name="fileName">A file name (including the full path) for the created TIFF image.</param>
      <param name="pageNumbers">A list of page numbers.</param>
      <param name="imageDpi">An image’s DPI.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateTiff(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <para>Exports PDF pages to a multi-page TIFF image and saves the image to a file.</para>
      </summary>
      <param name="fileName">A file name (including the full path) for the created TIFF image.</param>
      <param name="largestEdgeLength">A length of the image’s largest dimension, in pixels.</param>
      <param name="pageNumbers">A list of page numbers.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.CreateTiff(System.String,System.Int32)">
      <summary>
        <para>Exports a PDF document to a multi-page TIFF image and saves the image to a file.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> which specifies the file name (including the full path) for the created Tiff image.</param>
      <param name="largestEdgeLength">An integer value, specifying the length of the image’s largest dimension, in pixels.</param>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.DataRecognitionCacheSize">
      <summary>
        <para>Gets or sets the cache size (in pages) for data recognition.</para>
      </summary>
      <value>The number of pages with cached data.</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.DeleteAttachment(DevExpress.Pdf.PdfFileAttachment)">
      <summary>
        <para>Returns a value indicating if the attachment is deleted from a PDF document.</para>
      </summary>
      <param name="attachment">A <see cref="T:DevExpress.Pdf.PdfFileAttachment"/> object which contains attachment settings.</param>
      <returns>If the attachment is deleted from a PDF document, the value is true; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.DeleteMarkupAnnotation(DevExpress.Pdf.PdfMarkupAnnotationData)">
      <summary>
        <para>Deletes a markup annotation from a page.</para>
      </summary>
      <param name="annotationData">A <see cref="T:DevExpress.Pdf.PdfMarkupAnnotationData"/> object that is the text markup annotation that will be deleted.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.DeleteMarkupAnnotations(System.Collections.Generic.IEnumerable{DevExpress.Pdf.PdfMarkupAnnotationData})">
      <summary>
        <para>Deletes markup annotations specified in the <see cref="T:DevExpress.Pdf.PdfMarkupAnnotationData"/> collection.</para>
      </summary>
      <param name="annotations">A collection of <see cref="T:DevExpress.Pdf.PdfMarkupAnnotationData"/> objects that represent text markup annotations that will be deleted.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.DeletePage(System.Int32)">
      <summary>
        <para>Deletes the specified page from the document.</para>
      </summary>
      <param name="pageNumber">The page number (starting with 1).</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.DeletePages(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <para>Removes the specified pages from the document.</para>
      </summary>
      <param name="pageNumbers">A collection of page numbers that should be deleted.</param>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.Document">
      <summary>
        <para>Provides access to a <see cref="T:DevExpress.Pdf.PdfDocument"/> class, which represents the current document.</para>
      </summary>
      <value>A current document.</value>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.DocumentFacade">
      <summary>
        <para>Retrieves a document facade - a set of methods used to perform various operations on PDF document without access to its inner structure.</para>
      </summary>
      <value>An object that exposes facade methods.</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.Export(System.IO.Stream,DevExpress.Pdf.PdfFormDataFormat)">
      <summary>
        <para>Exports interactive form data to the stream in the specified form data format.</para>
      </summary>
      <param name="stream">A stream to which interactive the form data should be exported.</param>
      <param name="format">A <see cref="T:DevExpress.Pdf.PdfFormDataFormat"/> enumeration value that indicates the form data format.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.Export(System.String,DevExpress.Pdf.PdfFormDataFormat)">
      <summary>
        <para>Exports interactive form data to the file in the specified form data format.</para>
      </summary>
      <param name="fileName">A path to the file to which interactive form data should be exported.</param>
      <param name="format">An enumeration value that indicates the form data format.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.FindText(System.String,DevExpress.Pdf.PdfTextSearchParameters)">
      <summary>
        <para>Searches for the specified text in the current document with the applied parameters.</para>
      </summary>
      <param name="text">A <see cref="T:System.String"/> value, specifying the text to find in the PDF.</param>
      <param name="parameters">A <see cref="T:DevExpress.Pdf.PdfTextSearchParameters"/> object.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfTextSearchResults"/> object.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.FindText(System.String)">
      <summary>
        <para>Searches for the specified text in the current document with default parameters.</para>
      </summary>
      <param name="text">A <see cref="T:System.String"/> value, specifying the text to find in the PDF.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfTextSearchResults"/> object.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.FlattenForm">
      <summary>
        <para>Flattens an entire interactive form.</para>
      </summary>
      <returns>true If the interactive form is flattened successfully; false If the document doesn’t contain an interactive form that should be flattened.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.FlattenFormField(System.String)">
      <summary>
        <para>Flattens a specific form field on an interactive form by its name.</para>
      </summary>
      <param name="name">A string that is the name of the form field to be flattened.</param>
      <returns>true, if the interactive form field is flattened successfully;  false If the document doesn’t contain a form field that should be flattened.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetFormData">
      <summary>
        <para>Returns an object containing values of interactive form data fields.</para>
      </summary>
      <returns>A <see cref="T:DevExpress.Pdf.PdfFormData"/> object.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetFormFieldNames">
      <summary>
        <para>Returns a list of interactive field names in a document.</para>
      </summary>
      <returns>A collection of <see cref="T:System.String"/> objects that is a list of interactive field names in a document.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetImages(DevExpress.Pdf.PdfDocumentArea,System.Single)">
      <summary>
        <para>Retrieves images found within the specified document area using image resolution.</para>
      </summary>
      <param name="area">A <see cref="T:DevExpress.Pdf.PdfDocumentArea"/> object that represents a document area.</param>
      <param name="imageResolution">A <see cref="T:System.Single"/> object that represents the value, in dots per inch, for the image resolution.</param>
      <returns>A collection of <see cref="T:System.Drawing.Bitmap"/> objects.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetImages(DevExpress.Pdf.PdfDocumentArea)">
      <summary>
        <para>Retrieves the images found within the specified document area.</para>
      </summary>
      <param name="area">A <see cref="T:DevExpress.Pdf.PdfDocumentArea"/> object.</param>
      <returns>A collection of <see cref="T:System.Drawing.Bitmap"/> objects.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetImages(DevExpress.Pdf.PdfDocumentPosition,DevExpress.Pdf.PdfDocumentPosition,System.Single)">
      <summary>
        <para>Retrieves the images found within the specified document positions using image resolution.</para>
      </summary>
      <param name="startPosition">A <see cref="T:DevExpress.Pdf.PdfDocumentPosition"/> object that is the initial document position, starting from which, the images is obtained.</param>
      <param name="endPosition">A <see cref="T:DevExpress.Pdf.PdfDocumentPosition"/> object that is the final document position, starting from which, images are not obtained.</param>
      <param name="imageResolution">A <see cref="T:System.Single"/> object that represents the value, in dots per inch, for the image resolution.</param>
      <returns>A collection of <see cref="T:System.Drawing.Bitmap"/> objects.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetImages(DevExpress.Pdf.PdfDocumentPosition,DevExpress.Pdf.PdfDocumentPosition)">
      <summary>
        <para>Retrieves the images found within the specified document positions.</para>
      </summary>
      <param name="startPosition">A <see cref="T:DevExpress.Pdf.PdfDocumentPosition"/> object.</param>
      <param name="endPosition">A <see cref="T:DevExpress.Pdf.PdfDocumentPosition"/> object.</param>
      <returns>A collection of <see cref="T:System.Drawing.Bitmap"/> objects.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetMarkupAnnotationData(System.Int32)">
      <summary>
        <para>Retrieves all text markup annotations from a page in a PDF document.</para>
      </summary>
      <param name="pageNumber">The number of a page where the markup annotations are located.</param>
      <returns>The annotations retrieved from a page.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetPageText(System.Int32,DevExpress.Pdf.PdfTextExtractionOptions)">
      <summary>
        <para>Obtains text from the specified page.</para>
      </summary>
      <param name="pageNumber">The page number. The minimum value is 1.</param>
      <param name="options">An object that contains extraction options.</param>
      <returns>The text obtained from the specified page.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetPageText(System.Int32)">
      <summary>
        <para>Obtains text from the specified page.</para>
      </summary>
      <param name="pageNumber">An integer value that specifies the page number. The minimum value is 1.</param>
      <returns>A <see cref="T:System.String"/> value that represents text obtained from the specified page.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetText">
      <summary>
        <para>Retrieves the document content.</para>
      </summary>
      <returns>The text obtained from the document.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetText(DevExpress.Pdf.PdfDocumentArea,DevExpress.Pdf.PdfTextExtractionOptions)">
      <summary>
        <para>Retrieves document content from the specified area with specified extraction options.</para>
      </summary>
      <param name="area">The document area from which the content should be extracted.</param>
      <param name="options">A PdfTextExtractionOptions object that contains extraction options.</param>
      <returns>The text obtained from the specified area.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetText(DevExpress.Pdf.PdfDocumentArea)">
      <summary>
        <para>Retrieves the text found in the specified document area.</para>
      </summary>
      <param name="area">A <see cref="T:DevExpress.Pdf.PdfDocumentArea"/> object.</param>
      <returns>The content retrieved from the specified area.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetText(DevExpress.Pdf.PdfDocumentPosition,DevExpress.Pdf.PdfDocumentPosition,DevExpress.Pdf.PdfTextExtractionOptions)">
      <summary>
        <para>Retrieves document content located between the specified document positions with specified extraction options.</para>
      </summary>
      <param name="startPosition">The area’s start position.</param>
      <param name="endPosition">The area’s end position.</param>
      <param name="options">A PdfTextExtractionOptions object that contains extraction options.</param>
      <returns>The text obtained from the specified area.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetText(DevExpress.Pdf.PdfDocumentPosition,DevExpress.Pdf.PdfDocumentPosition)">
      <summary>
        <para>Retrieves the text located between the specified document positions.</para>
      </summary>
      <param name="startPosition">A <see cref="T:DevExpress.Pdf.PdfDocumentPosition"/> object that is the initial document position.</param>
      <param name="endPosition">A <see cref="T:DevExpress.Pdf.PdfDocumentPosition"/> object that is the final document position.</param>
      <returns>A <see cref="T:System.String"/> value that is the target the text.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetText(DevExpress.Pdf.PdfTextExtractionOptions)">
      <summary>
        <para>Retrieves document content with specified extraction options.</para>
      </summary>
      <param name="options">A PdfTextExtractionOptions object that contains extraction options.</param>
      <returns>The content obtained from the document.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.GetWord(DevExpress.Pdf.PdfDocumentPosition)">
      <summary>
        <para>Returns a word at the specified document position.</para>
      </summary>
      <param name="position">Specifies the position of the word to return.</param>
      <returns>A word at the specified position. Null (Nothing in VB) if a word is not found.</returns>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.ImageCacheSize">
      <summary>
        <para>Specifies the size of the image cache (in megabytes).</para>
      </summary>
      <value>An integer value, specifying the image cache size (in megabytes).</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.Import(System.IO.Stream,DevExpress.Pdf.PdfFormDataFormat)">
      <summary>
        <para>Imports interactive form data from the specified stream using the specified format.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> class descendant specifying the stream containing the file with interactive form data.</param>
      <param name="format">A <see cref="T:DevExpress.Pdf.PdfFormDataFormat"/> enumeration value.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.Import(System.IO.Stream)">
      <summary>
        <para>Imports interactive form data from the specified stream.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> class descendant specifying the stream containing the file with interactive form data.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.Import(System.String,DevExpress.Pdf.PdfFormDataFormat)">
      <summary>
        <para>Imports interactive form data from the specified file using the specified format.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> specifying the path to the file with interactive form data.</param>
      <param name="format">A <see cref="T:DevExpress.Pdf.PdfFormDataFormat"/> enumeration value.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.Import(System.String)">
      <summary>
        <para>Imports interactive form data from the specified file.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> specifying the path to the file which contains interactive form data.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.InsertNewPage(System.Int32,DevExpress.Pdf.PdfRectangle)">
      <summary>
        <para>Inserts a new page with a specified page number and page size into the document.</para>
      </summary>
      <param name="pageNumber">An integer value that is the number of a page that should be inserted into the document.</param>
      <param name="mediaBox">A <see cref="T:DevExpress.Pdf.PdfRectangle"/> object that is the actual page size.</param>
      <returns>A <see cref="T:DevExpress.Pdf.PdfPage"/> object that is the new inserted page.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.LoadDocument(System.IO.Stream,System.Boolean)">
      <summary>
        <para>Opens a PDF document from the specified stream using detach stream mode.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object.</param>
      <param name="detachStreamAfterLoadComplete">true the PDF Document API component completes all input operations after loading a document; false the stream should not be closed or modified until the PDF Document API component finishes using a document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.LoadDocument(System.IO.Stream)">
      <summary>
        <para>Opens a PDF document from the specified stream.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.LoadDocument(System.String,System.Boolean)">
      <summary>
        <para>Opens a PDF document from the specified file using detach stream mode.</para>
      </summary>
      <param name="path">A <see cref="T:System.String"/> value, specifying the file path.</param>
      <param name="detachStreamAfterLoadComplete">true if the PDF Document API component unlocks a file until it is loaded; otherwise false.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.LoadDocument(System.String)">
      <summary>
        <para>Opens a PDF document from the specified file.</para>
      </summary>
      <param name="path">A <see cref="T:System.String"/> value, specifying the file path.</param>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.MaxPrintingDpi">
      <summary>
        <para>Specifies the maximum value of the <see cref="P:DevExpress.Pdf.PdfPrinterSettings.PrintingDpi"/> property.</para>
      </summary>
      <value>An integer value. The zero value indicates that the printing DPI is not limited.</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.NextWord">
      <summary>
        <para>Returns the next word in a PDF document.</para>
      </summary>
      <returns>A <see cref="T:DevExpress.Pdf.PdfPageWord"/> object, providing information about the document page corresponding to the specified word.</returns>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.PasswordAttemptsLimit">
      <summary>
        <para>Specifies the maximum number of allowed attempts to enter the PDF file’s security password.</para>
      </summary>
      <value>An integer value.</value>
    </member>
    <member name="E:DevExpress.Pdf.PdfDocumentProcessor.PasswordRequested">
      <summary>
        <para>Occurs when requesting a security password to open a protected PDF file.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.PrevWord">
      <summary>
        <para>Returns the previous word in a PDF document.</para>
      </summary>
      <returns>A <see cref="T:DevExpress.Pdf.PdfPageWord"/> object, providing information about the document page corresponding to the specified PDF word.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.Print(DevExpress.Pdf.PdfPrinterSettings)">
      <summary>
        <para>Prints the document with custom printer settings.</para>
      </summary>
      <param name="printerSettings">An object providing printer settings.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
        <para>Obsolete. Prints the current document, using the specified settings.</para>
      </summary>
      <param name="printerSettings">A <see cref="T:System.Drawing.Printing.PrinterSettings"/> object.</param>
    </member>
    <member name="E:DevExpress.Pdf.PdfDocumentProcessor.PrintPage">
      <summary>
        <para>Occurs when the document page is printed.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Pdf.PdfDocumentProcessor.QueryPageSettings">
      <summary>
        <para>Occurs immediately before the <see cref="E:DevExpress.Pdf.PdfDocumentProcessor.PrintPage"/> event.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.RemoveForm">
      <summary>
        <para>Removes all  interactive form fields from a PDF document.</para>
      </summary>
      <returns>If form fields were removed from a PDF document, the value is true; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.RemoveFormField(System.String)">
      <summary>
        <para>Removes an interactive form field from a document using the field name.</para>
      </summary>
      <param name="name">A <see cref="T:System.String"/> which specifies the name of a form field.</param>
      <returns>If the form field was removed from a PDF document, the value is true; otherwise, false.</returns>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.RenderingEngine">
      <summary>
        <para>Specifies the engine used to render page content.</para>
      </summary>
      <value>The enumeration value that specifies the rendering engine.</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.RenderNewPage(DevExpress.Pdf.PdfRectangle,DevExpress.Pdf.PdfGraphics,System.Single,System.Single)">
      <summary>
        <para>Adds a new page with specified page size, DPI, and created graphics to a document.</para>
      </summary>
      <param name="mediaBox">A <see cref="T:DevExpress.Pdf.PdfRectangle"/> object that is the page size, in points (1/72 of an inch).</param>
      <param name="graphics">A <see cref="T:DevExpress.Pdf.PdfGraphics"/> object that contains all graphics content that allows an application to draw on the page.</param>
      <param name="dpiX">A <see cref="T:System.Single"/> object that represents the value, in dots per inch, for the horizontal resolution.</param>
      <param name="dpiY">A <see cref="T:System.Single"/> object that represents the value, in dots per inch, for the vertical resolution.</param>
      <returns>An integer value, specifying the page number.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.RenderNewPage(DevExpress.Pdf.PdfRectangle,DevExpress.Pdf.PdfGraphics)">
      <summary>
        <para>Adds a new page with specified page size and created graphics to a document.</para>
      </summary>
      <param name="mediaBox">A <see cref="T:DevExpress.Pdf.PdfRectangle"/> object that is the page size, in points (1/72 of an inch).</param>
      <param name="graphics">A <see cref="T:DevExpress.Pdf.PdfGraphics"/> object that contains all graphics content that allows an application to draw on the page.</param>
      <returns>An integer value, specifying the page number. The page number is started with 1.</returns>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.RenderPageContentWithDirectX">
      <summary>
        <para>Gets or sets whether to render page content with DirectX.</para>
      </summary>
      <value>true, to enable DirectX page content rendering; false, to render page content with GDI/GDI+. The default setting is true.</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.ResetFormData">
      <summary>
        <para>Resets all fields of the interactive form to their default values.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.SaveDocument(System.IO.Stream,DevExpress.Pdf.PdfSaveOptions,System.Boolean)">
      <summary>
        <para>Saves the current PDF document to the specified stream with encryption settings and document signature using detach stream mode.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object that is the stream to which the PDF document is saved.</param>
      <param name="options">A <see cref="T:DevExpress.Pdf.PdfSaveOptions"/> object that contains the encryption settings and document signature that should be saved.</param>
      <param name="detachStream">true, the PDF Document API component completes all operations after saving a document; false, the stream should not be closed or modified while a PDF document is saved.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.SaveDocument(System.IO.Stream,DevExpress.Pdf.PdfSaveOptions)">
      <summary>
        <para>Saves the current PDF document to the specified stream with encryption settings and document signature.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> value, specifying the location of the saved document.</param>
      <param name="options">A <see cref="T:DevExpress.Pdf.PdfSaveOptions"/> that contains the encryption settings and document signature that should be saved.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.SaveDocument(System.IO.Stream,System.Boolean)">
      <summary>
        <para>Saves the current PDF document to the specified stream using the detach stream mode.</para>
      </summary>
      <param name="stream">A  <see cref="T:System.IO.Stream"/> object that is the stream to which the PDF document is saved.</param>
      <param name="detachStream">true, the PDF Document API component completes all operations after saving a document; false, the output stream should not be modified or closed while a PDF document is saved.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.SaveDocument(System.IO.Stream)">
      <summary>
        <para>Saves the current document to the specified file stream.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> value, specifying the location of the saved document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.SaveDocument(System.String,DevExpress.Pdf.PdfSaveOptions,System.Boolean)">
      <summary>
        <para>Saves the current PDF document to the specified file with encryption settings and document signature using the detach stream mode.</para>
      </summary>
      <param name="path">A <see cref="T:System.String"/> that is the file path to which a document is saved.</param>
      <param name="options">A <see cref="T:DevExpress.Pdf.PdfSaveOptions"/> object that contains the encryption settings and document signature that should be saved.</param>
      <param name="detachStream">true, the PDF Document API component unlocks a file while a document is saved; false, the PDF Document API component locks a file while a document is saved (default mode).</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.SaveDocument(System.String,DevExpress.Pdf.PdfSaveOptions)">
      <summary>
        <para>Saves the current PDF document to the specified file path with encryption and sign settings.</para>
      </summary>
      <param name="path">A <see cref="T:System.String"/>, specifying the path to the directory to which the PDF document should be saved.</param>
      <param name="options">A <see cref="T:DevExpress.Pdf.PdfSaveOptions"/> that contains the encryption and sign settings of a PDF document that should be saved.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.SaveDocument(System.String,System.Boolean)">
      <summary>
        <para>Saves the current PDF document to the specified file using the detach stream mode.</para>
      </summary>
      <param name="path">A <see cref="T:System.String"/> that is the file path to which a document is saved.</param>
      <param name="detachStream">true, the PDF Document API component unlocks a file while a document is saved; false, the PDF Document API component locks a file while a document is saved (default mode).</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentProcessor.SaveDocument(System.String)">
      <summary>
        <para>Saves the current document to the specified file path.</para>
      </summary>
      <param name="path">A <see cref="T:System.String"/> value, specifying the location of the saved document.</param>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.ShowImagePlaceholder">
      <summary>
        <para>Gets or sets a value which indicates whether to show placeholders for images in unsupported image formats.</para>
      </summary>
      <value>true to show image placeholders in unsupported image formats; otherwise false.</value>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentProcessor.Text">
      <summary>
        <para>Provides access to the PDF text.</para>
      </summary>
      <value>A <see cref="T:System.String"/> value that is the target text.</value>
    </member>
    <member name="T:DevExpress.Pdf.PdfDocumentSigner">
      <summary>
        <para>A helper class used to apply signatures to PDF documents.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.#ctor(System.IO.Stream,System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Pdf.PdfDocumentSigner"/> class with specified settings.</para>
      </summary>
      <param name="stream">A stream that contains a document to sign.</param>
      <param name="password">The password used to open a protected document.</param>
      <param name="leaveOpen">true to leave the stream open; otherwise, false.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.#ctor(System.IO.Stream,System.String)">
      <summary>
        <para>Initializes a new <see cref="T:DevExpress.Pdf.PdfDocumentSigner"/> class instance with the specified settings.</para>
      </summary>
      <param name="stream">A stream that contains a document to sign.</param>
      <param name="password">The password used to open a protected document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Pdf.PdfDocumentSigner"/> class with specified settings.</para>
      </summary>
      <param name="stream">The stream that contains a document that needs to be signed.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new <see cref="T:DevExpress.Pdf.PdfDocumentSigner"/> class instance with the specified settings.</para>
      </summary>
      <param name="filePath">A path to the document to sign.</param>
      <param name="password">The password used to open a protected document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.#ctor(System.String)">
      <summary>
        <para>Initializes a new <see cref="T:DevExpress.Pdf.PdfDocumentSigner"/> class instance with specified settings.</para>
      </summary>
      <param name="filePath">A path to the document to sign.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.AddToDss(System.String,DevExpress.Office.DigitalSignatures.ICrlClient,DevExpress.Office.DigitalSignatures.IOcspClient,DevExpress.Office.DigitalSignatures.ICertificateStoreProvider)">
      <summary>
        <para>Adds information about the specified signature to the Document Security Store (DSS).</para>
      </summary>
      <param name="signatureFieldName">The name of the form field that contains the target signature.</param>
      <param name="crl">An object that contains a Certificate Revocation List (CRL) request for a certificate chain.</param>
      <param name="ocsp">An object that returns Online Certificate Status Protocol (OCSP) responce for a certificate chain.</param>
      <param name="provider">Provides certificates used to build a certificate chain.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.AddToDss(System.String,System.Collections.Generic.IList{System.Byte[]},System.Collections.Generic.IList{System.Byte[]},System.Collections.Generic.IList{System.Byte[]})">
      <summary>
        <para>Adds information about the specified signature to the Document Security Store (DSS).</para>
      </summary>
      <param name="signatureFieldName">The name of the form field that contains the target signature.</param>
      <param name="certificates">A list of certificates used to create the certificate chain.</param>
      <param name="crls">A list of DER-encoded CertificateList ASN.1 objects (rfc5280) that contain the Certificate Revocation List (CRL) for every certificate in the chain (except the root certificate).</param>
      <param name="ocsp">A list of DER-encoded OCSPResponse ASN.1 objects (rfc6960) that contain the OCSP server response for every certificate in the chain except root.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.ClearSignatureField(System.String)">
      <summary>
        <para>Removes a signature applied to the specific signature field.</para>
      </summary>
      <param name="formFieldName">The field name to clear.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.ClearSignatureFields">
      <summary>
        <para>Removes signatures from all signed form fields.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.CreateBitmap(DevExpress.Pdf.PdfSignatureBuilder,System.Drawing.Size)">
      <summary>
        <para>Generates a signature image based on the appearance parameters.</para>
      </summary>
      <param name="builder">An object that contains signature parameters.</param>
      <param name="size">The image size.</param>
      <returns>A signature image.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.Dispose">
      <summary>
        <para>Disposes of the PdfDocumentSigner object.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentSigner.FailOnInvalidDocument">
      <summary>
        <para>Specifies whether to throw an exception when the document to sign is invalid.</para>
      </summary>
      <value>true, to throw an exception; otherwise, false.</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.GetSignatureFieldNames(System.Boolean)">
      <summary>
        <para>Retrieves names of signature fields.</para>
      </summary>
      <param name="emptyFieldsOnly">true to retrieve names of not signed fields only; otherwise, false.</param>
      <returns>A list of form fields’ names.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.GetSignatureInfo">
      <summary>
        <para>Returns a list of objects that contain information about the signatures (certification level, signer name, etc.).</para>
      </summary>
      <returns>A list of PdfSignatureInfo objects that contain information about each signature.</returns>
    </member>
    <member name="P:DevExpress.Pdf.PdfDocumentSigner.PageCount">
      <summary>
        <para>Returns the total number of document pages.</para>
      </summary>
      <value>The total page number.</value>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.SaveDocument(System.IO.Stream,DevExpress.Pdf.PdfSignatureBuilder[])">
      <summary>
        <para>Saves the PDF document to a stream with the specified document signatures.</para>
      </summary>
      <param name="stream">The stream to which to save the document.</param>
      <param name="signatures">An array of signatures to apply to the document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.SaveDocument(System.String,DevExpress.Pdf.PdfSignatureBuilder[])">
      <summary>
        <para>Saves the PDF document to a file with the specified document signatures.</para>
      </summary>
      <param name="filePath">The path to a file into which to save the document.</param>
      <param name="signatures">An array of signatures to apply to the document.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfDocumentSigner.SignDeferred(DevExpress.Pdf.PdfDeferredSignatureBuilder)">
      <summary>
        <para>Adds the signature to the document and retrieves the document hash for further signing.</para>
      </summary>
      <param name="builder">A signature to add.</param>
      <returns>An object that contains the document hash.</returns>
    </member>
    <member name="T:DevExpress.Pdf.PdfPageWord">
      <summary>
        <para>An individual word related to a specific PDF page.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Pdf.PdfPageWord.PageNumber">
      <summary>
        <para>Indicates the page number corresponding to a specific word in a PDF file.</para>
      </summary>
      <value>An integer value, specifying the number of a PDF page.</value>
    </member>
    <member name="T:DevExpress.Pdf.PdfViewerExtensions">
      <summary>
        <para>Defines extension methods that are used to extend the functionality of the WinForms PDF Viewer and WPF PDF Viewer.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.Export(DevExpress.Pdf.IPdfViewer,System.IO.Stream,DevExpress.Pdf.PdfFormDataFormat)">
      <summary>
        <para>Exports interactive form data to a specified stream using form data format. This is an extension method.</para>
      </summary>
      <param name="viewer">A <see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/> object that implements the <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream"/> value, containing the document to which interactive form data should be exported.</param>
      <param name="format">A <see cref="T:DevExpress.Pdf.PdfFormDataFormat"/> enumeration value that represents one of the supported formats for PDF form data values.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.Export(DevExpress.Pdf.IPdfViewer,System.String,DevExpress.Pdf.PdfFormDataFormat)">
      <summary>
        <para>Exports interactive form data to the file using the specified form data format. This is an extension method.</para>
      </summary>
      <param name="viewer">A <see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/> object that implements <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface.</param>
      <param name="fileName">A <see cref="T:System.String"/>, specifying the path to the file to which the document with interactive form data should be exported.</param>
      <param name="format">A <see cref="T:DevExpress.Pdf.PdfFormDataFormat"/> enumeration value that represents one of the supported formats for form data values.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.GetDocumentFacade(DevExpress.Pdf.IPdfViewer)">
      <summary>
        <para>Retrieves a document facade—a set of members used to perform various operations on a PDF document without access to its inner structure.</para>
      </summary>
      <param name="viewer">An object that implements the <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface (<see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/>).</param>
      <returns>An object that exposes facade methods.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.Import(DevExpress.Pdf.IPdfViewer,System.IO.Stream,DevExpress.Pdf.PdfFormDataFormat)">
      <summary>
        <para>Imports interactive form data from a specified stream using form data format. This is an extension method.</para>
      </summary>
      <param name="viewer">A <see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/> object that implements the <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream"/> value, specifying the stream containing the document with interactive form data.</param>
      <param name="format">A <see cref="T:DevExpress.Pdf.PdfFormDataFormat"/> enumeration value that lists formats used to import the file with form data values.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.Import(DevExpress.Pdf.IPdfViewer,System.IO.Stream)">
      <summary>
        <para>Imports interactive form data from a stream. This is an extension method.</para>
      </summary>
      <param name="viewer">A <see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/> object that implements the <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream"/> value, specifying the stream containing document with interactive form data.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.Import(DevExpress.Pdf.IPdfViewer,System.String,DevExpress.Pdf.PdfFormDataFormat)">
      <summary>
        <para>Imports interactive form data from the specified file with the specified form data format. This is an extension method.</para>
      </summary>
      <param name="viewer">A <see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/> object that implements the <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface.</param>
      <param name="fileName">A <see cref="T:System.String"/>, specifying the path to the file from which the interactive form data should be imported.</param>
      <param name="format">A <see cref="T:DevExpress.Pdf.PdfFormDataFormat"/> enumeration value that lists formats for PDF form data values.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.Import(DevExpress.Pdf.IPdfViewer,System.String)">
      <summary>
        <para>Imports interactive form data from the file. This is an extension method.</para>
      </summary>
      <param name="viewer">A <see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/> object that implements the <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface.</param>
      <param name="fileName">A <see cref="T:System.String"/>, specifying the path to the file from which interactive form data should be imported.</param>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.SaveDocument(DevExpress.Pdf.IPdfViewer,System.IO.Stream,DevExpress.Pdf.PdfSaveOptions)">
      <summary>
        <para>Saves the document to the specified stream with encryption settings and document signature. This is an extension method.</para>
      </summary>
      <param name="viewer">A <see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/> object that implements the <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface.</param>
      <param name="stream">A System.IO.Stream value specifying the location of the saved document.</param>
      <param name="options">A <see cref="T:DevExpress.Pdf.PdfSaveOptions"/> that contains the encryption and sign settings of a PDF document that should be saved.</param>
      <returns>true, if the document is saved successfully; false, if the document saving operation is cancelled by the user.</returns>
    </member>
    <member name="M:DevExpress.Pdf.PdfViewerExtensions.SaveDocument(DevExpress.Pdf.IPdfViewer,System.String,DevExpress.Pdf.PdfSaveOptions)">
      <summary>
        <para>Saves the document to the specified file path with encryption settings and document signature. This is an extension method.</para>
      </summary>
      <param name="viewer">A <see cref="T:DevExpress.XtraPdfViewer.PdfViewer"/> or <see cref="T:DevExpress.Xpf.PdfViewer.PdfViewerControl"/> object that implements the <see cref="T:DevExpress.Pdf.IPdfViewer"/> interface.</param>
      <param name="path">A System.String, specifying the path to the directory to which the PDF document should be saved.</param>
      <param name="options">A <see cref="T:DevExpress.Pdf.PdfSaveOptions"/> that contains the encryption and sign settings of a PDF document that should be saved.</param>
      <returns>true, if the document is saved successfully; false, if the document saving operation is cancelled by the user.</returns>
    </member>
    <member name="N:DevExpress.Spreadsheet">
      <summary>
        <para>Contains classes and interfaces that implement basic spreadsheet functionality.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Spreadsheet.CellRangeExtensions">
      <summary>
        <para>Contains extension methods for the <see cref="T:DevExpress.Spreadsheet.CellRange"/> interface.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.CellRangeExtensions.ExportToImage(DevExpress.Spreadsheet.CellRange,DevExpress.Spreadsheet.RangeImageOptions)">
      <summary>
        <para>Exports the cell range to an image and allows you to specify export options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="range">The cell range to be exported to an image.</param>
      <param name="options">An object that defines export options.</param>
      <returns>The output image.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.CellRangeExtensions.ExportToImage(DevExpress.Spreadsheet.CellRange,System.IO.Stream,DevExpress.Spreadsheet.ImageFileFormat,DevExpress.Spreadsheet.RangeImageOptions)">
      <summary>
        <para>Exports the cell range to an image in the specified format and allows you to specify export options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="range">The cell range to be exported to an image.</param>
      <param name="stream">A stream used to save the output image.</param>
      <param name="format">The output image format.</param>
      <param name="options">An object that defines export options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.CellRangeExtensions.ExportToImage(DevExpress.Spreadsheet.CellRange,System.IO.Stream,DevExpress.Spreadsheet.ImageFileFormat)">
      <summary>
        <para>Exports the cell range to an image in the specified format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="range">The cell range to be exported to an image.</param>
      <param name="stream">A stream used to save the output image.</param>
      <param name="format">The output image format.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.CellRangeExtensions.ExportToImage(DevExpress.Spreadsheet.CellRange,System.String,DevExpress.Spreadsheet.ImageFileFormat,DevExpress.Spreadsheet.RangeImageOptions)">
      <summary>
        <para>Exports the cell range to an image in the specified format and allows you to specify export options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="range">The cell range to be exported to an image.</param>
      <param name="fileName">The file name (including the full path) for the output image.</param>
      <param name="format">The output image format.</param>
      <param name="options">An object that defines export options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.CellRangeExtensions.ExportToImage(DevExpress.Spreadsheet.CellRange,System.String,DevExpress.Spreadsheet.ImageFileFormat)">
      <summary>
        <para>Exports the cell range to an image in the specified format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="range">The cell range to be exported to an image.</param>
      <param name="fileName">The file name (including the full path) for the output image.</param>
      <param name="format">The output image format.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.CellRangeExtensions.ExportToImage(DevExpress.Spreadsheet.CellRange)">
      <summary>
        <para>Exports the cell range to an image.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="range">The cell range to be exported to an image.</param>
      <returns>The output image.</returns>
    </member>
    <member name="T:DevExpress.Spreadsheet.ChartSheetExtensions">
      <summary>
        <para>Defines extension methods for the <see cref="T:DevExpress.Spreadsheet.ChartSheet"/> interface.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use these methods in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.ChartSheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.ChartSheet,System.Int32,System.Int32,DevExpress.Spreadsheet.SheetThumbnailOptions)">
      <summary>
        <para>Saves the chart sheet as an image. Allows you to specify the image size and thumbnail options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="chartSheet">The chart sheet to be saved as an image.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
      <param name="options">An object that defines thumbnail options.</param>
      <returns>The output image.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.ChartSheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.ChartSheet,System.Int32,System.Int32)">
      <summary>
        <para>Saves the chart sheet as an image with the specified size.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="chartSheet">The chart sheet to be saved as an image.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
      <returns>The output image.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.ChartSheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.ChartSheet,System.IO.Stream,DevExpress.Spreadsheet.ImageFileFormat,System.Int32,System.Int32,DevExpress.Spreadsheet.SheetThumbnailOptions)">
      <summary>
        <para>Saves the chart sheet as an image in the specified format. Allows you to specify the image size and thumbnail options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="chartSheet">The chart sheet to be saved as an image.</param>
      <param name="stream">A stream used to save the output image.</param>
      <param name="format">The output image format.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
      <param name="options">An object that defines thumbnail options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.ChartSheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.ChartSheet,System.IO.Stream,DevExpress.Spreadsheet.ImageFileFormat,System.Int32,System.Int32)">
      <summary>
        <para>Saves the chart sheet as an image in the specified format and allows you to set the image size.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="chartSheet">The chart sheet to be saved as an image.</param>
      <param name="stream">A stream used to save the output image.</param>
      <param name="format">The output image format.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.ChartSheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.ChartSheet,System.String,DevExpress.Spreadsheet.ImageFileFormat,System.Int32,System.Int32,DevExpress.Spreadsheet.SheetThumbnailOptions)">
      <summary>
        <para>Saves the chart sheet as an image in the specified format. Allows you to specify the image size and thumbnail options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="chartSheet">The chart sheet to be saved as an image.</param>
      <param name="fileName">The file name (including full path) for the output image.</param>
      <param name="format">The output image format.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
      <param name="options">An object that defines thumbnail options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.ChartSheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.ChartSheet,System.String,DevExpress.Spreadsheet.ImageFileFormat,System.Int32,System.Int32)">
      <summary>
        <para>Saves the chart sheet as an image in the specified format and allows you to set the image size.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="chartSheet">The chart sheet to be saved as an image.</param>
      <param name="fileName">The file name (including full path) for the output image.</param>
      <param name="format">The output image format.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
    </member>
    <member name="N:DevExpress.Spreadsheet.Export">
      <summary>
        <para>Contains base interfaces and classes required for data export from the cells of the spreadsheet to a data table.</para>
      </summary>
    </member>
    <member name="T:DevExpress.Spreadsheet.Export.DataTableExporterExtensions">
      <summary>
        <para>Defines extension methods for the DevExpress.Spreadsheet.Export.DataTableExporter class.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Export.DataTableExporterExtensions.Export(DevExpress.Spreadsheet.Export.DataTableExporter)">
      <summary>
        <para>Exports a cell range to a DataTable.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="exporter">An object that performs export to a data table.</param>
    </member>
    <member name="T:DevExpress.Spreadsheet.Workbook">
      <summary>
        <para>A non-visual component that allows you to generate and modify spreadsheet documents.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.Spreadsheet.Workbook"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ActiveSheetChanged">
      <summary>
        <para>Occurs after an active worksheet in a workbook has been changed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ActiveSheetChanging">
      <summary>
        <para>Occurs when an active worksheet in a workbook is about to be changed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>
        <para>Adds the specified service to the service container.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
      <param name="promote">true, to promote this request to any parent service containers; otherwise, false.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>
        <para>Adds the specified service to the service container.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.AddService(System.Type,System.Object,System.Boolean)">
      <summary>
        <para>Adds the specified service to the service container.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the serviceType parameter.</param>
      <param name="promote">true, to promote this request to any parent service containers; otherwise, false.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.AddService(System.Type,System.Object)">
      <summary>
        <para>Adds the specified service to the service container.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the serviceType parameter.</param>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.BeforeEncodingDetection">
      <summary>
        <para>Occurs before detecting the encoding of the loaded CSV or TXT data.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.BeforeExport">
      <summary>
        <para>Occurs before the document is saved (exported to a certain format).</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.BeforeImport">
      <summary>
        <para>Occurs before a document is loaded (imported from an external source).</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.BeforePrintSheet">
      <summary>
        <para>Occurs before printing a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.BeginUpdate">
      <summary>
        <para>Locks the <see cref="T:DevExpress.Spreadsheet.Workbook"/> object until the <see cref="M:DevExpress.Spreadsheet.Workbook.EndUpdate"/> method is called.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Calculate">
      <summary>
        <para>Forces recalculation of the workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Calculate(DevExpress.Spreadsheet.CellRange)">
      <summary>
        <para>Forces recalculation of the specified cell range in a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> object containing formulas to be recalculated.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Calculate(DevExpress.Spreadsheet.Worksheet)">
      <summary>
        <para>Forces recalculation of the specified worksheet in a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object containing formulas to be recalculated.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.CalculateFull">
      <summary>
        <para>Forces a full calculation of a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.CalculateFullRebuild">
      <summary>
        <para>Forces a full calculation of a workbook and rebuilds the dependencies.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.CancelUpdate">
      <summary>
        <para>For internal use. Use the <see cref="M:DevExpress.Spreadsheet.Workbook.EndUpdate"/> method instead.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.ChartSheets">
      <summary>
        <para>Provides access to a collection of chart sheets contained in the workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.ChartSheetCollection"/> object that is a collection of chart sheets.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Clipboard">
      <summary>
        <para>Provides access to the object used for working with the system clipboard.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>An object implementing the <see cref="T:DevExpress.Spreadsheet.IClipboardManager"/> interface.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ClipboardDataObtained">
      <summary>
        <para>Occurs after data on the clipboard is obtained and recognized, but before data is actually pasted.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ClipboardDataPasted">
      <summary>
        <para>Occurs after data has been pasted from the clipboard onto a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ClipboardDataPasting">
      <summary>
        <para>Occurs before data is pasted into destination cells.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.ColorPalette">
      <summary>
        <para>Returns a color palette for the workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A palette of 56 RGB colors.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ColumnsInserted">
      <summary>
        <para>Occurs after new columns have been added to a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ColumnsInserting">
      <summary>
        <para>Occurs before new columns are added to a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ColumnsRemoved">
      <summary>
        <para>Occurs after columns have been deleted from a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ColumnsRemoving">
      <summary>
        <para>Occurs before columns are removed from a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ColumnWidthChanged">
      <summary>
        <para>Occurs after the column width was changed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.CommentInserted">
      <summary>
        <para>Occurs after a comment was inserted.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.CommentInserting">
      <summary>
        <para>Occurs before a comment is inserted.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.CommentRemoved">
      <summary>
        <para>Occurs after a comment was deleted.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.CommentRemoving">
      <summary>
        <para>Occurs before a comment is deleted.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ContentChanged">
      <summary>
        <para>Occurs when a workbook’s undo history changes. The Undo history is not logged for a Workbook instance by default, so the event is not raised.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.CopiedRangePasted">
      <summary>
        <para>Occurs after the range content has been pasted into target cells.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.CopiedRangePasting">
      <summary>
        <para>Occurs before the range content is pasted into target cells.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.CreateNewDocument">
      <summary>
        <para>Creates and loads a new empty workbook.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <returns>true, if the document is created successfully; otherwise, false.</returns>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.CurrentAuthor">
      <summary>
        <para>Gets the system username.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:System.String"/> value that specifies the username of the person currently logged on the operating system.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.CustomAssemblyLoading">
      <summary>
        <para>Occurs before a custom assembly is loaded for use as the Entity Framework data source during mail merge and allows cancelling loading.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.CustomFunctions">
      <summary>
        <para>Provides access to a collection of custom functions in a workbook</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.Functions.CustomFunctionCollection"/> collection of custom functions.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.CustomXmlParts">
      <summary>
        <para>Provides access to a workbook’s collection of custom XML parts.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A collection of custom XML parts.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.DefinedNameConflictResolving">
      <summary>
        <para>Occurs when the formula or sheet being moved or copied contains a defined name which already exists on the destination worksheet or workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.DefinedNames">
      <summary>
        <para>Gets the collection of defined names whose scope is the current workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.DefinedNameCollection"/> collection of a worksheet’s defined names.</value>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Dispose">
      <summary>
        <para>Releases resources associated with a <see cref="T:DevExpress.Spreadsheet.Workbook"/> instance.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.DocumentClosing">
      <summary>
        <para>Occurs when a document that has not yet been saved is about to be closed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.DocumentLoaded">
      <summary>
        <para>Occurs after a document is loaded.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.DocumentProperties">
      <summary>
        <para>Provides access to the document properties associated with a workbook.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.DocumentProperties"/> object containing information about a workbook.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.DocumentSaved">
      <summary>
        <para>Occurs after a document has been saved.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.DocumentSettings">
      <summary>
        <para>Provides access to the settings that specify how the calculation is performed and what reference style is used.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.DocumentSettings"/> object containing settings for the reference style and calculation options.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.EmptyDocumentCreated">
      <summary>
        <para>Occurs when a new document is created.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.EncryptedFileIntegrityCheckFailed">
      <summary>
        <para>Raises when the encrypted file did not pass the data integrity verification.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.EncryptedFilePasswordCheckFailed">
      <summary>
        <para>Occurs when the encryption password is empty or invalid.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.EncryptedFilePasswordRequest">
      <summary>
        <para>Raises when the <see cref="P:DevExpress.XtraSpreadsheet.Import.WorkbookImportOptions.Password"/> property is not set or contains a wrong password.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.EndUpdate">
      <summary>
        <para>Unlocks the <see cref="T:DevExpress.Spreadsheet.Workbook"/> object.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Evaluate(System.String,DevExpress.Spreadsheet.Functions.FormulaEvaluationContext)">
      <summary>
        <para>Evaluates the specified formula in a certain context.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="formula">A string that is the formula to be evaluated.</param>
      <param name="context">A <see cref="T:DevExpress.Spreadsheet.Functions.FormulaEvaluationContext"/> object containing information on the row, column and the current culture settings.</param>
      <returns>A <see cref="T:DevExpress.Spreadsheet.Functions.ParameterValue"/> object that is the calculation result and may contain a value, a reference or a calculation error.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Evaluate(System.String)">
      <summary>
        <para>Evaluates the specified formula.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="formula">A string that is the formula to be evaluated.</param>
      <returns>A <see cref="T:DevExpress.Spreadsheet.Functions.ParameterValue"/> object that is the calculation result and may contain a value, a reference or a calculation error.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtml(System.IO.Stream,DevExpress.Spreadsheet.CellRange)">
      <summary>
        <para>Exports the specified range to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> object to be exported to HTML.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtml(System.IO.Stream,DevExpress.Spreadsheet.Worksheet)">
      <summary>
        <para>Exports the specified worksheet to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object to be exported to HTML.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtml(System.IO.Stream,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions)">
      <summary>
        <para>Exports the document’s data to the specified stream in HTML format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="options">A <see cref="T:DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions"/> instance containing required export options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtml(System.IO.Stream,System.Int32)">
      <summary>
        <para>Exports the specified worksheet to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="sheetIndex">An integer value that is the index of the worksheet to be exported to HTML.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtml(System.String,DevExpress.Spreadsheet.CellRange)">
      <summary>
        <para>Exports the specified range to the specified file in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> object to be exported to HTML.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtml(System.String,DevExpress.Spreadsheet.Worksheet)">
      <summary>
        <para>Exports the specified worksheet to the specified file in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object to be exported to HTML.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtml(System.String,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions)">
      <summary>
        <para>Exports the document’s data to the specified file in HTML format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="options">A <see cref="T:DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions"/> instance containing required export options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtml(System.String,System.Int32)">
      <summary>
        <para>Exports the specified worksheet to the specified file in HTML format.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="sheetIndex">An integer value that is the index of the worksheet to be exported to HTML.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.Spreadsheet.CellRange,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified cell range to a stream in HTML format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="range">A cell range to save as HTML.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.Spreadsheet.CellRange,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified cell range to a stream in HTML format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="range">A cell range to save as HTML.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.Spreadsheet.CellRange,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the specified range to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> object to be exported to HTML.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.Spreadsheet.CellRange)">
      <summary>
        <para>Asynchronously exports the specified range to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> object to be exported to HTML.</param>
      <returns>A Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.Spreadsheet.Worksheet,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified worksheet to a stream in HTML format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="sheet">A worksheet to save as HTML.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.Spreadsheet.Worksheet,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified worksheet to a stream in HTML format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="sheet">A worksheet to save as HTML.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.Spreadsheet.Worksheet,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the specified range to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object to be exported to HTML.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.Spreadsheet.Worksheet)">
      <summary>
        <para>Asynchronously exports the specified worksheet to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object to be exported to HTML.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports document data to a stream in HTML format. Allows you to specify export options and implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">An object that defines export options.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports document data to a stream in HTML format. Allows you to specify export options, implement progress notifications, and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">An object that defines export options.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the document’s data to the specified stream in HTML format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="options">A <see cref="T:DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions"/> instance containing required export options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions)">
      <summary>
        <para>Asynchronously exports the document’s data to the specified stream in HTML format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="options">A <see cref="T:DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions"/> instance containing required export options.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,System.Int32,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified worksheet to a stream in HTML format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="sheetIndex">A zero-based index of the worksheet you want to save as HTML.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified worksheet to a stream in HTML format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="sheetIndex">A zero-based index of the worksheet you want to save as HTML.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the specified worksheet to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="sheetIndex">An integer value that is the index of the worksheet to be exported to HTML.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.IO.Stream,System.Int32)">
      <summary>
        <para>Asynchronously exports the specified range to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created HTML file should be sent.</param>
      <param name="sheetIndex">An integer value that is the index of the worksheet to be exported to HTML.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.Spreadsheet.CellRange,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified cell range to a file in HTML format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path (including the file name and extension) to the output file.</param>
      <param name="range">A cell range to save as HTML.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.Spreadsheet.CellRange,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified cell range to a file in HTML format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path (including the file name and extension) to the output file.</param>
      <param name="range">A cell range to save as HTML.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.Spreadsheet.CellRange,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the specified range to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> object to be exported to HTML.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.Spreadsheet.CellRange)">
      <summary>
        <para>Asynchronously exports the specified worksheet to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> object to be exported to HTML.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.Spreadsheet.Worksheet,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified worksheet to a file in HTML format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path (including the file name and extension) to the output file.</param>
      <param name="sheet">A worksheet to save as HTML.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.Spreadsheet.Worksheet,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified worksheet to a file in HTML format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path (including the file name and extension) to the output file.</param>
      <param name="sheet">A worksheet to save as HTML.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.Spreadsheet.Worksheet,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the specified worksheet to the specified file in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object to be exported to HTML.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.Spreadsheet.Worksheet)">
      <summary>
        <para>Asynchronously exports the specified worksheet to the specified file in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object to be exported to HTML.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports document data to a file in HTML format. Allows you to specify export options and implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path (including the file name and extension) to the output file.</param>
      <param name="options">An object that defines export options.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports document data to a file in HTML format. Allows you to specify export options, implement progress notifications, and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path (including the file name and extension) to the output file.</param>
      <param name="options">An object that defines export options.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the document’s data to the specified file in HTML format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="options">A <see cref="T:DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions"/> instance containing required export options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions)">
      <summary>
        <para>Asynchronously exports the document’s data to the specified file in HTML format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="options">A <see cref="T:DevExpress.XtraSpreadsheet.Export.HtmlDocumentExporterOptions"/> instance containing required export options.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,System.Int32,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified worksheet to a file in HTML format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path (including the file name and extension) to the output file.</param>
      <param name="sheetIndex">A zero-based index of the worksheet you want to save as HTML.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,System.Int32,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified worksheet to a file in HTML format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path (including the file name and extension) to the output file.</param>
      <param name="sheetIndex">A zero-based index of the worksheet you want to save as HTML.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,System.Int32,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the specified worksheet to the specified stream in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="sheetIndex">An integer value that is the index of the worksheet to be exported to HTML.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToHtmlAsync(System.String,System.Int32)">
      <summary>
        <para>Asynchronously exports the specified worksheet to the specified file in HTML format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which contains the full path (including the file name and extension) specifying where the HTML file will be created.</param>
      <param name="sheetIndex">An integer value that is the index of the worksheet to be exported to HTML.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdf(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <para>Defines export options and exports the specified sheets to the stream in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">Specifies export options.</param>
      <param name="sheetNames">Lists the names of the sheets to be saved in PDF format.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdf(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.String[])">
      <summary>
        <para>Defines export options and exports the specified sheets to the stream in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">Specifies export options.</param>
      <param name="sheetNames">The names of the sheets to be saved in PDF format.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdf(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions)">
      <summary>
        <para>Exports the workbook to the specified stream in PDF format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created PDF file should be sent.</param>
      <param name="options">A <see cref="T:DevExpress.XtraPrinting.PdfExportOptions"/> object specifying export settings.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdf(System.IO.Stream)">
      <summary>
        <para>Exports the workbook to the specified stream in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"/> object to which the created PDF file should be sent.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdf(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <para>Defines export options and exports the specified sheets to the file in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the created PDF file.</param>
      <param name="options">Specifies export options.</param>
      <param name="sheetNames">Lists the names of the sheets to be saved in PDF format.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdf(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.String[])">
      <summary>
        <para>Defines export options and exports the specified sheets to the file in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the created PDF file.</param>
      <param name="options">Specifies export options.</param>
      <param name="sheetNames">The names of the sheets to be saved in PDF format.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdf(System.String,DevExpress.XtraPrinting.PdfExportOptions)">
      <summary>
        <para>Exports the workbook to the specified file path in PDF format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> which specifies the file name (including the full path) for the created PDF file.</param>
      <param name="options">A <see cref="T:DevExpress.XtraPrinting.PdfExportOptions"/> object specifying export settings.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdf(System.String)">
      <summary>
        <para>Exports the workbook to the specified file path in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which specifies the file name (including the full path) for the created PDF file.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String},System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified sheets to a stream in PDF format. Allows you to specify export options and implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">Defines export options.</param>
      <param name="sheetNames">Lists the names of the sheets to save as PDF.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified sheets to a stream in PDF format. Allows you to specify export options, implement progress notifications, and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">Defines export options.</param>
      <param name="sheetNames">Lists the names of the sheets to save as PDF.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
      <summary>
        <para>Defines export options and asynchronously exports the specified sheets to the stream in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">Specifies export options.</param>
      <param name="sheetNames">Lists the names of the sheets to be saved in PDF format.</param>
      <param name="cancellationToken">An object used to trace the requests to cancel the operation.</param>
      <returns>An object that represents the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <para>Asynchronously exports the workbook to the specified file path in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A Stream object to which the created PDF file should be sent.</param>
      <param name="options">A <see cref="T:DevExpress.XtraPrinting.PdfExportOptions"/> object specifying export settings.</param>
      <param name="sheetNames">A collection of string values that are names of the worksheets to be exported.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the workbook to a stream in PDF format. Allows you to specify export options and implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">Defines export options.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.String[])">
      <summary>
        <para>Asynchronously exports specific worksheets to the specified file path in PDF format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A Stream object to which the created PDF file should be sent.</param>
      <param name="options">A <see cref="T:DevExpress.XtraPrinting.PdfExportOptions"/> object specifying export settings.</param>
      <param name="sheetNames">An array of string values that are names of the worksheets to be exported.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the workbook to a stream in PDF format. Allows you to specify export options, implement progress notifications, and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="options">Defines export options.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the workbook to the specified stream in PDF format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A Stream object to which the created PDF file should be sent.</param>
      <param name="options">A <see cref="T:DevExpress.XtraPrinting.PdfExportOptions"/> object specifying export settings.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions)">
      <summary>
        <para>Asynchronously exports the workbook to the specified stream in PDF format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A Stream object to which the created PDF file should be sent.</param>
      <param name="options">A <see cref="T:DevExpress.XtraPrinting.PdfExportOptions"/> object specifying export settings.</param>
      <returns>A Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the workbook to a stream in PDF format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the workbook to a stream in PDF format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the workbook to the specified stream in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A Stream object to which the created PDF file should be sent.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.IO.Stream)">
      <summary>
        <para>Asynchronously exports the workbook to the specified stream in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A Stream object to which the created PDF file should be sent.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String},System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified sheets to a file in PDF format. Allows you to specify export options and implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output PDF file.</param>
      <param name="options">Defines export options.</param>
      <param name="sheetNames">Lists the names of the sheets to save as PDF.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the specified sheets to a file in PDF format. Allows you to specify export options, implement progress notifications, and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output PDF file.</param>
      <param name="options">Defines export options.</param>
      <param name="sheetNames">Lists the names of the sheets to save as PDF.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
      <summary>
        <para>Defines export options and asynchronously exports the specified sheets to the file in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the created PDF file.</param>
      <param name="options">Specifies export options.</param>
      <param name="sheetNames">Lists the names of the sheets to be saved in PDF format.</param>
      <param name="cancellationToken">An object used to trace the requests to cancel the operation.</param>
      <returns>An object that represents the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <para>Defines export options and asynchronously exports the specified sheets to the file in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the created PDF file.</param>
      <param name="options">Specifies export options.</param>
      <param name="sheetNames">Lists the names of the sheets to be saved in PDF format.</param>
      <returns>An object that represents the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the workbook to a file in PDF format. Allows you to specify export options and implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output PDF file.</param>
      <param name="options">Defines export options.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.String[])">
      <summary>
        <para>Defines export options and asynchronously exports the specified sheets to the file in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the created PDF file.</param>
      <param name="options">Specifies export options.</param>
      <param name="sheetNames">The names of the sheets to be saved in PDF format.</param>
      <returns>An object that represents the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the workbook to a file in PDF format. Allows you to specify export options, implement progress notifications, and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output PDF file.</param>
      <param name="options">Defines export options.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the workbook to the specified file path in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which specifies the file name (including the full path) for the created PDF file.</param>
      <param name="options">A <see cref="T:DevExpress.XtraPrinting.PdfExportOptions"/> object specifying export settings.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,DevExpress.XtraPrinting.PdfExportOptions)">
      <summary>
        <para>Asynchronously exports the workbook to the specified stream in PDF format using the specified options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which specifies the file name (including the full path) for the created PDF file.</param>
      <param name="options">A <see cref="T:DevExpress.XtraPrinting.PdfExportOptions"/> object specifying export settings.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the workbook to a file in PDF format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output PDF file.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously exports the workbook to a file in PDF format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output PDF file.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the workbook to the specified file path in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which specifies the file name (including the full path) for the created PDF file.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ExportToPdfAsync(System.String)">
      <summary>
        <para>Asynchronously exports the workbook to the specified file path in PDF format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A <see cref="T:System.String"/> value which specifies the file name (including the full path) for the created PDF file.</param>
      <returns>An Task object representing an asynchronous export operation.</returns>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.ExternalWorkbooks">
      <summary>
        <para>Provides access to the collection of source workbooks used for creating external references in the current workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>An ExternalWorkbookCollection object.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.FormulaEngine">
      <summary>
        <para>Provides access to an object used to parse and evaluate formulas.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>An object that parses and calculates formulas.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Functions">
      <summary>
        <para>Provides access to the built-in functions in a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>An object implementing the <see cref="T:DevExpress.Spreadsheet.Functions.WorkbookFunctions"/> interface.</value>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.GenerateMailMergeDocuments">
      <summary>
        <para>Performs a mail merge and returns the collection of resulting workbooks.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <returns>An IList object that contains workbooks generated after a mail merge is preformed.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.GetService(System.Type)">
      <summary>
        <para>Gets the service object of the specified type.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>A service object of the specified type, or a null reference (Nothing in Visual Basic) if there is no service object of this type.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.GetService``1">
      <summary>
        <para>Gets the specified service.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <typeparam name="T">The service type.</typeparam>
      <returns>A service object of the specified type or null for reference types and zero for numeric value types if a service is not available.</returns>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.GlobalCustomFunctions">
      <summary>
        <para>Provides access to a collection of custom functions which are not limited in scope to the workbook in which the functions reside.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.Functions.CustomFunctionCollection"/> collection containing custom functions.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.HasMacros">
      <summary>
        <para>Determines whether the workbook has VBA projects (macros).</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>true, if a workbook has macros; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.History">
      <summary>
        <para>Provides access to the history of operations performed in a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.SpreadsheetHistory"/> object.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.InitializeDocument">
      <summary>
        <para>Occurs before a document is loaded. Handle this event to set initial document settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.InvalidFormatException">
      <summary>
        <para>Fires when the supplied data could not be recognized as data in the assumed format for import.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.IsDisposed">
      <summary>
        <para>Indicates whether a workbook has been disposed of.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>true, if the workbook is disposed of; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.IsProtected">
      <summary>
        <para>Indicates whether a workbook is protected.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>true, if the workbook is protected; otherwise, false.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.IsUpdateLocked">
      <summary>
        <para>Returns a value indicating whether the <see cref="T:DevExpress.Spreadsheet.Workbook"/> object is locked for update.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>true, if the object is locked; otherwise, false.</value>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocument(System.Byte[],DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads a document in the specified format from a byte array.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration member that specifies the format of the loaded document.</param>
      <returns>true, if the document was successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocument(System.Byte[])">
      <summary>
        <para>Loads a document from a byte array.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <returns>true, if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocument(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads a document in the specified format from a stream.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">The stream from which to load a document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration member that specifies the format of the loaded document.</param>
      <returns>true, if a document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocument(System.IO.Stream)">
      <summary>
        <para>Loads a document from a stream.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">The stream from which to load a document.</param>
      <returns>true, if a document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocument(System.String,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads a document in the specified format from a file.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A string that specifies a file to load (including the full path).</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration member that specifies the format of the loaded document.</param>
      <returns>true, if a document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocument(System.String)">
      <summary>
        <para>Loads a document from a file.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A string that specifies a file to load (including the full path).</param>
      <returns>true, if a document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.Byte[],DevExpress.Spreadsheet.DocumentFormat,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document in the specified format from a byte array and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="format">An enumeration member that specifies the format of the loaded document.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.Byte[],DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document in the specified format from a byte array. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="format">An enumeration member that specifies the format of the loaded document.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.Byte[],DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Loads a document asynchronously in the specified format from a byte array.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration member that specifies the format of the loaded document.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.Byte[],DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads a document asynchronously in the specified format from a byte array.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="format">A DocumentFormat enumeration member that specifies the format of the loaded document.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.Byte[],System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document from a byte array and allows you to implement progress notifications. The file format is determined based on document content</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.Byte[],System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document from a byte array (the file format is determined based on document content). Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.Byte[],System.Threading.CancellationToken)">
      <summary>
        <para>Loads a document asynchronously from a byte array.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.Byte[])">
      <summary>
        <para>Loads a document asynchronously from a byte array.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document in the specified format from a stream and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A stream that contains document data.</param>
      <param name="format">An enumeration member that specifies the format of the loaded document.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document in the specified format from a stream. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A stream that contains document data.</param>
      <param name="format">An enumeration member that specifies the format of the loaded document.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Loads a document asynchronously in the specified format from a stream.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">The stream from which to load a document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration member that specifies the format of the loaded document.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads a document asynchronously in the specified format from a stream.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">The stream from which to load a document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration member that specifies the format of the loaded document.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.IO.Stream,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document from a stream and allows you to implement progress notifications. The file format is determined based on document content.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A stream that contains document data.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.IO.Stream,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document from a stream (the file format is determined based on document content). Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A stream that contains document data.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>
        <para>Loads a document asynchronously from a stream.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">The stream from which to load a document.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.IO.Stream)">
      <summary>
        <para>Loads a document asynchronously from a stream.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">The stream from which to load a document.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document in the specified format from a file and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path to the loaded file.</param>
      <param name="format">An enumeration member that specifies the format of the loaded document.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document in the specified format from a file. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path to the loaded file.</param>
      <param name="format">An enumeration member that specifies the format of the loaded document.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Loads a document asynchronously in the specified format from a file.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A string that specifies a file to load (including the full path).</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration member that specifies the format of the loaded document.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads a document asynchronously in the specified format from a file.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A string that specifies a file to load (including the full path).</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration member that specifies the format of the loaded document.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.String,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document from a file and allows you to implement progress notifications. The file format is determined based on document content.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path to the loaded file.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.String,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously loads a document from a file (the file format is determined based on document content). Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The full path to the loaded file.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>A task that returns true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Loads a document asynchronously from a file.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A string that specifies a file to load (including the full path).</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentAsync(System.String)">
      <summary>
        <para>Loads a document asynchronously from a file.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">A string that specifies a file to load (including the full path).</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that return true if the document was loaded successfully; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentProperties(System.Byte[],DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads document properties for a workbook from the specified byte array.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="format">An enumeration member that defines the document format.</param>
      <returns>An object that stores the retrieved document properties.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentProperties(System.Byte[])">
      <summary>
        <para>Loads document properties for a workbook from the specified byte array. The document format is determined automatically.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="buffer">A byte array that contains document data.</param>
      <returns>An object that stores the retrieved document properties.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentProperties(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads document properties for a workbook from the specified stream.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A stream that contains the target document.</param>
      <param name="format">An enumeration member that defines the document format.</param>
      <returns>An object that stores the retrieved document properties.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentProperties(System.IO.Stream)">
      <summary>
        <para>Loads document properties for a workbook from the specified stream. The document format is determined automatically.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">A stream that contains the target document.</param>
      <returns>An object that stores the retrieved document properties.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentProperties(System.String,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Loads document properties from the specified workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The path to the target file.</param>
      <param name="format">An enumeration member that defines the document format.</param>
      <returns>An object that stores the retrieved document properties.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.LoadDocumentProperties(System.String)">
      <summary>
        <para>Loads document properties from the specified workbook. The document format is determined automatically.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The path to the target file.</param>
      <returns>An object that stores the retrieved document properties.</returns>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.MailMergeDataMember">
      <summary>
        <para>Gets or sets a specific data member in a data source that contains several tables or members.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A string value specifying the data source member.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.MailMergeDataSource">
      <summary>
        <para>Gets or sets the data source for the mail merge.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>An object that specifies the data source from which the merged data is retrieved.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.MailMergeOptions">
      <summary>
        <para>Provides access to mail merge options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.SpreadsheetMailMergeOptions"/> object containing the mail merge options.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.MailMergeParameters">
      <summary>
        <para>Provides access to a collection of query parameters used to obtain data in mail merge.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.ParametersCollection"/> collection of the <see cref="T:DevExpress.Spreadsheet.Parameter"/> types.</value>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Merge(DevExpress.Spreadsheet.IWorkbook[])">
      <summary>
        <para>Combines the specified workbooks into a new document.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="workbooks">An array of <see cref="T:DevExpress.Spreadsheet.IWorkbook"/> objects that are workbooks to be merged.If one or more workbooks is null, a System.ArgumentNullException exception occurs.</param>
      <returns>A <see cref="T:DevExpress.Spreadsheet.Workbook"/> object that is the resulting workbook.</returns>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Model">
      <summary>
        <para>For internal use.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Modified">
      <summary>
        <para>Gets or sets whether the workbook content was modified since it was last saved.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>true, if the workbook content was modified; otherwise, false.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ModifiedChanged">
      <summary>
        <para>Occurs when the value of the <see cref="P:DevExpress.Spreadsheet.Workbook.Modified"/> property is changed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Options">
      <summary>
        <para>Returns an object that contains document options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>An object that stores workbook options.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.PanesFrozen">
      <summary>
        <para>Occurs after a worksheet area has been frozen.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.PanesUnfrozen">
      <summary>
        <para>Occurs after a frozen worksheet area has been unlocked.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Path">
      <summary>
        <para>Gets the file name into which the workbook is saved or from which it is loaded.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:System.String"/> which specifies the current file name (including the path and the file extension).</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.PivotCaches">
      <summary>
        <para>Returns the collection of all PivotTable caches in a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>The collection of data caches from all PivotTable reports in a workbook.</value>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Print">
      <summary>
        <para>Prints the document to the default printer.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Print(System.Drawing.Printing.PrinterSettings,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <para>Defines printer settings and prints the specified sheets.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="printerSettings">Specifies printer settings.</param>
      <param name="sheetNames">Lists the names of the sheets to be printed.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Print(System.Drawing.Printing.PrinterSettings,System.String[])">
      <summary>
        <para>Defines printer settings and prints the specified sheets.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="printerSettings">Specifies printer settings.</param>
      <param name="sheetNames">The names of the sheets to be printed.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
        <para>Prints the document using the specified printer settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="printerSettings">A <see cref="T:System.Drawing.Printing.PrinterSettings"/> object that contains printer settings.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Protect(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Protects the structure and windows of a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="password">A string that specifies a password for the workbook. If an empty string is specified, the workbook can be unprotected without a password.</param>
      <param name="lockStructure">true, to lock the structure of the workbook (the position of the sheets); otherwise, false.</param>
      <param name="lockWindows">true, to prevent users from changing the position of worksheet windows; otherwise, false.</param>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Range">
      <summary>
        <para>Provides access to the cell range in the workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>An object implementing the <see cref="T:DevExpress.Spreadsheet.IRangeProvider"/> interface.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.RangeCopied">
      <summary>
        <para>Occurs after the range content has been copied.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.RangeCopying">
      <summary>
        <para>Occurs before a cell range is copied in a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.RealTimeData">
      <summary>
        <para>Returns an object used to manually update real-time data and reconnect to data servers.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>An object that exposes the <see cref="T:DevExpress.Spreadsheet.RealTimeData"/> interface.</value>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.RemoveService(System.Type,System.Boolean)">
      <summary>
        <para>Removes the service of the specified type from the service container.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="serviceType">The type of service to remove.</param>
      <param name="promote">true, to promote this request to any parent service containers; otherwise, false.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.RemoveService(System.Type)">
      <summary>
        <para>Removes the service of the specified type from the service container.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="serviceType">The type of service to remove.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.ReplaceService``1(``0)">
      <summary>
        <para>Performs a service substitution.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="newService">A service of the specified type that will be registered.</param>
      <typeparam name="T">The type of service to register.</typeparam>
      <returns>Previously registered service of the specified type, or null (Nothing in Visual Basic) if the service does not exist.</returns>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.RowHeightChanged">
      <summary>
        <para>Occurs after the row height was changed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.RowsInserted">
      <summary>
        <para>Occurs after new rows have been added to a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.RowsInserting">
      <summary>
        <para>Occurs before new rows are added to a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.RowsRemoved">
      <summary>
        <para>Occurs after rows have been deleted from a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.RowsRemoving">
      <summary>
        <para>Occurs before rows are removed from a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocument(DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings)">
      <summary>
        <para>Saves the document to an array of bytes in the specified format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <returns>A byte array that contains encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocument(DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Saves a document to a byte array in the specified format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <returns>A byte array that contains document data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocument(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings)">
      <summary>
        <para>Saves the document to a stream in the specified format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocument(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Saves the document to a stream in the specified format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocument(System.String,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings)">
      <summary>
        <para>Saves the document to a file in the specified format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocument(System.String,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Saves the document to a file in the specified document format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocument(System.String,DevExpress.Spreadsheet.EncryptionSettings)">
      <summary>
        <para>Saves the document to a file in the Excel or text format with the specified encryption settings. The file format is identified by the file extension.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocument(System.String)">
      <summary>
        <para>Saves the document to a file in the Excel or text format. The file format is identified by the file extension.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified file format, encrypts the output with a password, and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>Returns a byte array that contains encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified format and encrypts the file with a password. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>Returns a byte array that contains encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to an array of bytes in the specified format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns a byte array with encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings)">
      <summary>
        <para>Asynchronously saves the document to an array of bytes in the specified format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <returns>An asynchronous export operation that returns byte array with encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(DevExpress.Spreadsheet.DocumentFormat,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>Returns a byte array that contains document data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>Returns a byte array that contains document data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to an array of bytes in the specified document format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>A Task object that returns a byte array with encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified document format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns an array of bytes with encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a stream in the specified format, encrypts the file with a password, and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a stream in the specified format and encrypts the file with a password. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a stream in the specified document format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings)">
      <summary>
        <para>Asynchronously saves the document to a stream in the specified document format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a stream in the specified format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a stream in the specified format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a stream in the specified document format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.IO.Stream,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Asynchronously saves the document to a stream in the specified document format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="stream">Specifies the output stream.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a file in the specified format, encrypts the file with a password, and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output file.</param>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a file in the specified format and encrypts the file with a password. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output file.</param>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a file in the specified format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,DevExpress.Spreadsheet.EncryptionSettings)">
      <summary>
        <para>Asynchronously saves the document to a file in the specified document format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a file in the specified format and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output file.</param>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a file in the specified format. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output file.</param>
      <param name="format">An enumeration member that specifies the output document format.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a file in the specified document format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.DocumentFormat)">
      <summary>
        <para>Asynchronously saves the document to a file in the specified document format.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="format">A <see cref="T:DevExpress.Spreadsheet.DocumentFormat"/> enumeration value that specifies the document’s format.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.EncryptionSettings,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a file (the file format is defined by the file extension), encrypts the file with a password, and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output file.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.EncryptionSettings,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a file (the file format is defined by the file extension) and encrypts the file with a password. Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output file.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.EncryptionSettings,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a file in the specified format and with the specified encryption settings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,DevExpress.Spreadsheet.EncryptionSettings)">
      <summary>
        <para>Asynchronously saves the document to a file with the specified encryption settings. The file format is identified by the file extension.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="encryptionSettings">Specifies encryption options.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a file (the file format is defined by the file extension) and allows you to implement progress notifications.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output file.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,System.Threading.CancellationToken,System.IProgress{System.Int32})">
      <summary>
        <para>Asynchronously saves the document to a file (the file format is defined by the file extension). Allows you to implement progress notifications and cancel the operation.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">The file name (including the full path) for the output file.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <param name="progress">An object used to report the task progress in percentage. Use a <see cref="T:System.Progress`1"/> class instance to report progress.</param>
      <returns>An object that defines the asynchronous save operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a file.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <param name="cancellationToken">A CancellationToken object used to trace the requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.SaveDocumentAsync(System.String)">
      <summary>
        <para>Asynchronously saves the document to a file in the Excel or text format. The file format is identified by the file extension.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="fileName">Specifies the file path to save the document.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.SchemaChanged">
      <summary>
        <para>Occurs when a worksheet or defined name is renamed, inserted or deleted.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ScrollPositionChanged">
      <summary>
        <para>Occurs when the scroll position changes in a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Search(System.String,DevExpress.Spreadsheet.SearchOptions)">
      <summary>
        <para>Performs a search in the current document by using the specified options.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="text">Specifies the text to search.</param>
      <param name="options">Contains search options.</param>
      <returns>A collection of cells that match the search term.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Search(System.String)">
      <summary>
        <para>Performs a search in the current document by using the default parameters.</para>
        <para />
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="text">Specifies the text to search.</param>
      <returns>A collection of cells that match the search term.</returns>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.SelectionChanged">
      <summary>
        <para>Fires when the selection changes in a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ShapeInserted">
      <summary>
        <para>Occurs after a drawing object has been inserted into a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ShapeRemoved">
      <summary>
        <para>Occurs after a drawing object has been removed from a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ShapeRemoving">
      <summary>
        <para>Occurs before a drawing object is removed from a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ShapesCopying">
      <summary>
        <para>Occurs before a drawing object is copied in a worksheet.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.SheetInserted">
      <summary>
        <para>Occurs after a new worksheet has been added to a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.SheetRemoved">
      <summary>
        <para>Occurs after a worksheet has been removed from a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.SheetRemoving">
      <summary>
        <para>Occurs before a worksheet is removed from a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.SheetRenamed">
      <summary>
        <para>Occurs after a worksheet has been renamed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.SheetRenaming">
      <summary>
        <para>Occurs when a worksheet is about to be renamed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Sheets">
      <summary>
        <para>Provides access to a collection of all sheets contained in the workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.SheetCollection"/> object specifying a sheet collection.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Styles">
      <summary>
        <para>Provides access to the workbook’s collection of cell styles.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.StyleCollection"/> collection containing cell styles.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.TableStyles">
      <summary>
        <para>Provides access to the collection of styles to format tables in the workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:DevExpress.Spreadsheet.TableStyleCollection"/> object containing table styles.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Tag">
      <summary>
        <para>Gets or sets data associated with a <see cref="T:DevExpress.Spreadsheet.Workbook"/> object.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>A <see cref="T:System.Object"/> that contains arbitrary data for a workbook. The default is null.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Theme">
      <summary>
        <para>Returns the theme applied to the workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>The document theme.</value>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Unit">
      <summary>
        <para>Gets or sets a unit of measure used in the workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>The <see cref="T:DevExpress.Office.DocumentUnit"/> enumeration member.</value>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.UnitChanged">
      <summary>
        <para>Fires after a unit of measurement used in the workbook is changed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.UnitChanging">
      <summary>
        <para>Fires before a unit of measurement used within the workbook is changed.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.Workbook.Unprotect(System.String)">
      <summary>
        <para>Removes protection from a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="password">A string that specifies the password with which the workbook is protected.</param>
      <returns>true if protection is successfully removed; otherwise, false.</returns>
    </member>
    <member name="E:DevExpress.Spreadsheet.Workbook.ValidateCustomSqlQuery">
      <summary>
        <para>Allows you to validate a custom SQL query created in the Data Source Wizard.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this event in production code.</para>
      </summary>
    </member>
    <member name="P:DevExpress.Spreadsheet.Workbook.Worksheets">
      <summary>
        <para>Returns the collection of worksheets in a workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this property in production code.</para>
      </summary>
      <value>The collection of <see cref="T:DevExpress.Spreadsheet.Worksheet"/> objects.</value>
    </member>
    <member name="T:DevExpress.Spreadsheet.WorkbookExtensions">
      <summary>
        <para>Defines extension methods for objects exposing the <see cref="T:DevExpress.Spreadsheet.IWorkbook"/> interface.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorkbookExtensions.Append(DevExpress.Spreadsheet.IWorkbook,DevExpress.Spreadsheet.IWorkbook[])">
      <summary>
        <para>Appends all worksheets from the specified workbooks to the current workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="workbook">An object exposing the <see cref="T:DevExpress.Spreadsheet.IWorkbook"/> interface that is a master workbook to which other workbooks should be added.</param>
      <param name="workbooks">An array of <see cref="T:DevExpress.Spreadsheet.IWorkbook"/> objects that are workbooks that should be merged with a master workbook.If one or more workbooks is null, a System.ArgumentNullException exception occurs.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorkbookExtensions.Clone(DevExpress.Spreadsheet.IWorkbook,System.Boolean)">
      <summary>
        <para>Creates a workbook copy and specifies whether the resulting document should contain formula results instead of formula expressions.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="workbook">An object exposing the <see cref="T:DevExpress.Spreadsheet.IWorkbook"/> interface that specifies the source workbook for copying.</param>
      <param name="copyFormulas">true, to copy formulas of the source workbook; otherwise, false. If false, only the calculated results are copied.</param>
      <returns>A <see cref="T:DevExpress.Spreadsheet.Workbook"/> object that is the created copy.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorkbookExtensions.Clone(DevExpress.Spreadsheet.IWorkbook)">
      <summary>
        <para>Creates a workbook copy.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="workbook">An object exposing the <see cref="T:DevExpress.Spreadsheet.IWorkbook"/> interface that specifies the source workbook for copying.</param>
      <returns>A <see cref="T:DevExpress.Spreadsheet.Workbook"/> object that is the created copy.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorkbookExtensions.Merge(DevExpress.Spreadsheet.IWorkbook,DevExpress.Spreadsheet.WorkbookMergeOptions,DevExpress.Spreadsheet.IWorkbook[])">
      <summary>
        <para>Merges data from multiple workbooks into a single workbook.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="workbook">An object exposing the <see cref="T:DevExpress.Spreadsheet.IWorkbook"/> interface that specifies a workbook to be merged.</param>
      <param name="options">A <see cref="T:DevExpress.Spreadsheet.WorkbookMergeOptions"/> object containing merge options.</param>
      <param name="workbooks">An array of <see cref="T:DevExpress.Spreadsheet.IWorkbook"/> objects that are workbooks that should be merged with a master workbook.</param>
      <returns>An object exposing the <see cref="T:DevExpress.Spreadsheet.IWorkbookMergeResult"/> interface that contains the result of a merge process.</returns>
    </member>
    <member name="T:DevExpress.Spreadsheet.WorksheetExtensions">
      <summary>
        <para>Defines extension methods for the <see cref="T:DevExpress.Spreadsheet.Worksheet"/> interface.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use these methods in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateDataTable(DevExpress.Spreadsheet.Worksheet,DevExpress.Spreadsheet.CellRange,System.Boolean,System.Boolean)">
      <summary>
        <para>Creates an empty data table from the specified cell range.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object that is a worksheet containing the specified range.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> of cells that will be transformed to a data table.</param>
      <param name="rangeHasHeaders">true, to use the content of the first row in a range as column names in a data table; otherwise, false.</param>
      <param name="stringColumnType">true, to use string data type for all columns in the resulting data table; otherwise, false.</param>
      <returns>A <see cref="T:System.Data.DataTable"/> object that is the resulting data table.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateDataTable(DevExpress.Spreadsheet.Worksheet,DevExpress.Spreadsheet.CellRange,System.Boolean)">
      <summary>
        <para>Creates an empty data table from the specified cell range.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> object that is a worksheet containing the specified range.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> of cells that will be transformed to a data table.</param>
      <param name="rangeHasHeaders">true, to use the content of the first row in a range as column names in a data table; otherwise, false.</param>
      <returns>A <see cref="T:System.Data.DataTable"/> object that is the resulting data table.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateDataTableExporter(DevExpress.Spreadsheet.Worksheet,DevExpress.Spreadsheet.CellRange,System.Data.DataTable,System.Boolean)">
      <summary>
        <para>Creates an instance of the data table exporter.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> interface for the worksheet which contains data for export.</param>
      <param name="range">A <see cref="T:DevExpress.Spreadsheet.CellRange"/> of cells containing data for export.</param>
      <param name="dataTable">A <see cref="T:System.Data.DataTable"/> object which will be populated with exported data.</param>
      <param name="rangeHasHeaders">true, to skip the first row in the specified range; otherwise, false.</param>
      <returns>A <see cref="T:DevExpress.Spreadsheet.Export.DataTableExporter"/> instance that performs export to a data table.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,DevExpress.Spreadsheet.WorksheetThumbnailOptions)">
      <summary>
        <para>Save the worksheet as an image. Allows you to specify the image size and thumbnail options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">The worksheet to be saved as an image.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
      <param name="options">An object that defines thumbnail options.</param>
      <returns>The output image.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32)">
      <summary>
        <para>Saves the worksheet as an image with the specified size.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">The worksheet to be saved as an image.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
      <returns>The output image.</returns>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.Worksheet,System.IO.Stream,DevExpress.Spreadsheet.ImageFileFormat,System.Int32,System.Int32,DevExpress.Spreadsheet.WorksheetThumbnailOptions)">
      <summary>
        <para>Saves the worksheet as an image in the specified format. Allows you to specify the image size and thumbnail options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">The worksheet to be saved as an image.</param>
      <param name="stream">A stream used to save the output image.</param>
      <param name="format">The output image format.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
      <param name="options">An object that defines thumbnail options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.Worksheet,System.IO.Stream,DevExpress.Spreadsheet.ImageFileFormat,System.Int32,System.Int32)">
      <summary>
        <para>Saves the worksheet as an image in the specified format and allows you to set the image size.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">The worksheet to be saved as an image.</param>
      <param name="stream">A stream used to save the output image.</param>
      <param name="format">The output image format.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.Worksheet,System.String,DevExpress.Spreadsheet.ImageFileFormat,System.Int32,System.Int32,DevExpress.Spreadsheet.WorksheetThumbnailOptions)">
      <summary>
        <para>Saves the worksheet as an image in the specified format. Allows you to specify the image size and thumbnail options.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">The worksheet to be saved as an image.</param>
      <param name="fileName">The file name (including full path) for the output image.</param>
      <param name="format">The output image format.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
      <param name="options">An object that defines thumbnail options.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.CreateThumbnail(DevExpress.Spreadsheet.Worksheet,System.String,DevExpress.Spreadsheet.ImageFileFormat,System.Int32,System.Int32)">
      <summary>
        <para>Saves the worksheet as an image in the specified format and allows you to set the image size.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">The worksheet to be saved as an image.</param>
      <param name="fileName">The file name (including full path) for the output image.</param>
      <param name="format">The output image format.</param>
      <param name="width">The output image width in pixels.</param>
      <param name="height">The output image height in pixels.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Boolean[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of boolean values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of boolean values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Boolean[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of boolean values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of boolean values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of bytes.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of bytes that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Byte[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of bytes.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of bytes that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Collections.IEnumerable,System.Int32,System.Int32,System.Boolean,DevExpress.Spreadsheet.DataImportOptions)">
      <summary>
        <para>Imports data from a collection.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">An object that exposes the <see cref="T:System.Collections.IEnumerable"/> interface provided by a collection of objects being imported.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true, to insert imported data vertically; otherwise, false</param>
      <param name="options">A <see cref="T:DevExpress.Spreadsheet.DataImportOptions"/> object containing data import options, parameters and converter.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Collections.IEnumerable,System.Int32,System.Int32,System.Boolean,DevExpress.Spreadsheet.IDataValueConverter)">
      <summary>
        <para>Imports data from a collection.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">An object that exposes the <see cref="T:System.Collections.IEnumerable"/> interface provided by a collection of objects being imported.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true, to insert imported data vertically; otherwise, false</param>
      <param name="converter">An object that implements the <see cref="T:DevExpress.Spreadsheet.IDataValueConverter"/> interface for data conversion.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Collections.IEnumerable,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from a collection.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">An object that exposes the <see cref="T:System.Collections.IEnumerable"/> interface provided by a collection of objects being imported.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true, to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Data.DataTable,System.Boolean,System.Int32,System.Int32,DevExpress.Spreadsheet.DataImportOptions)">
      <summary>
        <para>Imports data from a data table.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">A <see cref="T:System.Data.DataTable"/> object that is the data source for import.</param>
      <param name="addHeader">true, to insert column names to the row above the cells containing imported data; otherwise, false.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="options">A <see cref="T:DevExpress.Spreadsheet.DataImportOptions"/> object containing data import options, parameters and converter.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Data.DataTable,System.Boolean,System.Int32,System.Int32,DevExpress.Spreadsheet.IDataValueConverter)">
      <summary>
        <para>Imports data from a data table.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">A <see cref="T:System.Data.DataTable"/> object that is the data source for import.</param>
      <param name="addHeader">true, to insert column names to the row above the cells containing imported data; otherwise, false.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="converter">An object that implements the <see cref="T:DevExpress.Spreadsheet.IDataValueConverter"/> interface for data conversion.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Data.DataTable,System.Boolean,System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a data table.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">A <see cref="T:System.Data.DataTable"/> object that is the data source for import.</param>
      <param name="addHeader">true, to insert column names to the row above the cells containing imported data; otherwise, false.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Data.IDataReader,System.Boolean,System.Int32,System.Int32,DevExpress.Spreadsheet.DataImportOptions)">
      <summary>
        <para>Imports data from a relational database.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">An object that exposes the <see cref="T:System.Data.IDataReader"/> interface, e.g., an object returned by the SqlCommand.ExecuteReader method.</param>
      <param name="addHeader">true, to insert column names to the row above the cells containing imported data; otherwise, false.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="options">A <see cref="T:DevExpress.Spreadsheet.DataImportOptions"/> object containing data import options, parameters and converter.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Data.IDataReader,System.Boolean,System.Int32,System.Int32,DevExpress.Spreadsheet.IDataValueConverter)">
      <summary>
        <para>Imports data from a relational database.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">An object that exposes the <see cref="T:System.Data.IDataReader"/> interface, e.g., an object returned by the SqlCommand.ExecuteReader method.</param>
      <param name="addHeader">true, to insert column names to the row above the cells containing imported data; otherwise, false.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="converter">An object that implements the <see cref="T:DevExpress.Spreadsheet.IDataValueConverter"/> interface for data conversion.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Data.IDataReader,System.Boolean,System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a relational database.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="source">An object that exposes the <see cref="T:System.Data.IDataReader"/> interface, e.g., an object returned by the SqlCommand.ExecuteReader method.</param>
      <param name="addHeader">true, to insert column names to the row above the cells containing imported data; otherwise, false.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.DateTime[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of DateTime values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of <see cref="T:System.DateTime"/> values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.DateTime[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of DateTime values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of <see cref="T:System.DateTime"/> values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Decimal[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of decimal values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of decimal values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Decimal[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of decimal values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of decimal values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Double[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of double-precision floating point values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of double-precision floating point values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Double[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of double-precision floating point values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of double-precision floating point values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Int16[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of short integers.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of short integers that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Int16[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of integers.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of integers that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Int32[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of integers.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of integers that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Int32[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of integers.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of integers that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Int64[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of long integers.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of long integers that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Int64[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of long integers.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of long integers that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Object,System.Int32,System.Int32,DevExpress.Spreadsheet.DataSourceImportOptions)">
      <summary>
        <para>Imports data from a data source.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="dataSource">An object that is the data source for import.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="options">A <see cref="T:DevExpress.Spreadsheet.DataSourceImportOptions"/> object specifying filed names to import.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a data source.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="dataSource">An object that is the data source for import.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Object[],System.Int32,System.Int32,System.Boolean,DevExpress.Spreadsheet.DataImportOptions)">
      <summary>
        <para>Imports data from an one-dimensional array of objects.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of objects that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
      <param name="options">A <see cref="T:DevExpress.Spreadsheet.DataImportOptions"/> object containing data import options, parameters and converter.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Object[],System.Int32,System.Int32,System.Boolean,DevExpress.Spreadsheet.IDataValueConverter)">
      <summary>
        <para>Imports data from an one-dimensional array of objects.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of objects that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true, to insert imported data vertically; otherwise, false</param>
      <param name="converter">An object that implements the <see cref="T:DevExpress.Spreadsheet.IDataValueConverter"/> interface for data conversion.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Object[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of objects.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of objects that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Object[0:,0:],System.Int32,System.Int32,DevExpress.Spreadsheet.DataImportOptions)">
      <summary>
        <para>Imports data from a two-dimensional array of objects.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of objects that is the source of data.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="options">A <see cref="T:DevExpress.Spreadsheet.DataImportOptions"/> object containing data import options, parameters and converter.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Object[0:,0:],System.Int32,System.Int32,DevExpress.Spreadsheet.IDataValueConverter)">
      <summary>
        <para>Imports data from a two-dimensional array of objects.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of objects that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="converter">An object that implements the <see cref="T:DevExpress.Spreadsheet.IDataValueConverter"/> interface for data conversion.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Object[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of objects.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of objects that is the source of data.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Single[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of single-precision floating point values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of single-precision floating point values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.Single[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of single-precision floating point values.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of single-precision floating point values that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.String[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Imports data from an one-dimensional array of strings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="array">A one-dimensional array of strings that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="isVertical">true to insert imported data vertically; otherwise, false</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.String[0:,0:],System.Int32,System.Int32,DevExpress.Spreadsheet.DataImportOptions)">
      <summary>
        <para>Imports data from a two-dimensional array of strings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of strings that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
      <param name="options">A <see cref="T:DevExpress.Spreadsheet.DataImportOptions"/> object containing data import options, parameters and converter.</param>
    </member>
    <member name="M:DevExpress.Spreadsheet.WorksheetExtensions.Import(DevExpress.Spreadsheet.Worksheet,System.String[0:,0:],System.Int32,System.Int32)">
      <summary>
        <para>Imports data from a two-dimensional array of strings.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="sheet">A <see cref="T:DevExpress.Spreadsheet.Worksheet"/> that is the worksheet to which the data is imported.</param>
      <param name="twoDimensionalArray">A two-dimensional array of strings that is the data source.</param>
      <param name="firstRowIndex">An integer that is the row index of the start cell in which the imported data will be inserted.</param>
      <param name="firstColumnIndex">An integer that is the column index of the start cell in which the imported data will be inserted.</param>
    </member>
    <member name="N:DevExpress.UnitConversion">
      <summary>
        <para>Contains classes of the Unit Conversion library that are essential for the conversion between different units of measurement.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Area">
      <summary>
        <para>Lists units of area measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.AcreInternational">
      <summary>
        <para>International acre (“uk_acre”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.AcreStatute">
      <summary>
        <para>U.S. survey/statute acre (“us_acre”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.Are">
      <summary>
        <para>Are (“ar”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.Hectare">
      <summary>
        <para>Hectare (“ha”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.Morgen">
      <summary>
        <para>Morgen (“Morgen”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquareAngstrom">
      <summary>
        <para>Square angstrom (“ang2”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquareFoot">
      <summary>
        <para>Square feet (“ft2”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquareInch">
      <summary>
        <para>Square inches (“in2”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquareLightYear">
      <summary>
        <para>Square light-year (“ly2”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquareMeter">
      <summary>
        <para>Square meters (“m2”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquareMile">
      <summary>
        <para>Square miles (“mi2”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquareMileNautical">
      <summary>
        <para>Square nautical miles (“Nmi2”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquarePicaPoint">
      <summary>
        <para>Square Pica (“Pica2”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Area.SquareYard">
      <summary>
        <para>Square yards (“yd2”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.AreaUnitsConverter">
      <summary>
        <para>Converts area measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.AreaUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.AreaUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.BaseUnitsConverter`1">
      <summary>
        <para>Base class for unit converters.</para>
      </summary>
      <typeparam name="T" />
    </member>
    <member name="M:DevExpress.UnitConversion.BaseUnitsConverter`1.Convert(System.Collections.Generic.IList{System.Double},`0,`0)">
      <summary>
        <para>Converts a list of Double values from one unit of measurement to another.</para>
      </summary>
      <param name="values">An <see cref="T:System.Collections.Generic.IList`1"/>&lt;<see cref="T:System.Double"/>,&gt;array of values.</param>
      <param name="from">Measurement unit of the source value.</param>
      <param name="to">Measurement unit of the target value.</param>
    </member>
    <member name="M:DevExpress.UnitConversion.BaseUnitsConverter`1.Convert(System.Double,`0,`0)">
      <summary>
        <para>Converts a value of type Double from one unit of measurement to another.</para>
      </summary>
      <param name="value">A <see cref="T:System.Double"/> source value.</param>
      <param name="from">Measurement unit of the source value.</param>
      <param name="to">Measurement unit of the target value.</param>
      <returns>A <see cref="T:System.Double"/> value.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.BaseUnitsConverter`1.Convert(System.Double[],`0,`0)">
      <summary>
        <para>Converts an array of type Double from one unit of measurement to another.</para>
      </summary>
      <param name="values">An array of <see cref="T:System.Double"/> values.</param>
      <param name="from">Measurement unit of the source value.</param>
      <param name="to">Measurement unit of the target value.</param>
    </member>
    <member name="M:DevExpress.UnitConversion.BaseUnitsConverter`1.GetTransform(`0,`0)">
      <summary>
        <para>Obtains a delegate function that performs the conversion.</para>
      </summary>
      <param name="from">Measurement unit of the source value.</param>
      <param name="to">Measurement unit of the target value.</param>
      <returns>A delegate method that performs the conversion.</returns>
    </member>
    <member name="T:DevExpress.UnitConversion.BinaryPrefix">
      <summary>
        <para>Lists binary metric prefixes.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Exa">
      <summary>
        <para>2^60 = 1 152 921 504 606 846 976 (“Ei”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Exbi">
      <summary>
        <para>2^60 = 1 152 921 504 606 846 976 (“Ei”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Gibi">
      <summary>
        <para>2^30 = 1 073 741 824 (“Gi”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Giga">
      <summary>
        <para>2^30 = 1 073 741 824 (“Gi”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Kibi">
      <summary>
        <para>2^10 = 1024 (“ki”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Kilo">
      <summary>
        <para>2^10 = 1024 (“ki”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Mebi">
      <summary>
        <para>2^20 = 1 048 576 “Mi”</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Mega">
      <summary>
        <para>2^20 = 1 048 576 “Mi”</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.None">
      <summary>
        <para>1</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Pebi">
      <summary>
        <para>2^50 = 1 125 899 906 842 624 (“Pi”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Peta">
      <summary>
        <para>2^50 = 1 125 899 906 842 624 (“Pi”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Tebi">
      <summary>
        <para>2^40 = 1 099 511 627 776 (“Ti”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Tera">
      <summary>
        <para>2^40 = 1 099 511 627 776 (“Ti”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Yobi">
      <summary>
        <para>2^80 = 1 208 925 819 614 629 174 706 176 (“Yi”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Yotta">
      <summary>
        <para>2^80 = 1 208 925 819 614 629 174 706 176 (“Yi”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Zebi">
      <summary>
        <para>2^70 = 1 180 591 620 717 411 303 424 (“Zi”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.BinaryPrefix.Zetta">
      <summary>
        <para>2^70 = 1 180 591 620 717 411 303 424 (“Zi”)</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.BinaryUnitsConverter">
      <summary>
        <para>Converts a value from one binary prefix multiplier to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.BinaryUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.BinaryUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Distance">
      <summary>
        <para>Lists units of distance measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.Angstrom">
      <summary>
        <para>Angstrom (“ang”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.Ell">
      <summary>
        <para>Ell (“ell”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.Foot">
      <summary>
        <para>Foot (“ft”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.Inch">
      <summary>
        <para>Inch (“in”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.LightYear">
      <summary>
        <para>Light-year (“ly”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.Meter">
      <summary>
        <para>Meter (“m”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.MileNautical">
      <summary>
        <para>Nautical mile (“Nmi”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.MileStatute">
      <summary>
        <para>Statute mile (“mi”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.MileUSSurvey">
      <summary>
        <para>U.S survey mile (statute mile) (“survey_mi”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.Parsec">
      <summary>
        <para>Parsec (“parsec”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.Pica">
      <summary>
        <para>Pica (1/6 inch) “pica”.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.PicaPoint">
      <summary>
        <para>Pica (1/72 inch) (“Pica”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Distance.Yard">
      <summary>
        <para>Yard (“yd”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.DistanceUnitsConverter">
      <summary>
        <para>Converts distance measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.DistanceUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.DistanceUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Energy">
      <summary>
        <para>Lists units of energy measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.BritishThermalUnit">
      <summary>
        <para>British Thermal Unit (“btu”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.Btu">
      <summary>
        <para>British Thermal Unit (“btu”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.CalorieIT">
      <summary>
        <para>IT calorie (“cal”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.CalorieThermodynamic">
      <summary>
        <para>Thermodynamic calorie (“c”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.ElectronVolt">
      <summary>
        <para>Electron volt (“eV”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.Erg">
      <summary>
        <para>Erg (“e”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.Ev">
      <summary>
        <para>Electron volt (“eV”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.Flb">
      <summary>
        <para>Foot-pound (‘flb”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.FootPound">
      <summary>
        <para>Foot-pound (‘flb”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.HorsePowerHour">
      <summary>
        <para>Horsepower-hour (“HPh”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.HPh">
      <summary>
        <para>Horsepower-hour (“HPh”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.Joule">
      <summary>
        <para>Joule (“J”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.WattHour">
      <summary>
        <para>Watt-hour (“Wh”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Energy.Wh">
      <summary>
        <para>Watt-hour (“Wh”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.EnergyUnitsConverter">
      <summary>
        <para>Converts energy measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.EnergyUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.EnergyUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Force">
      <summary>
        <para>Lists units of force measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Force.Dyne">
      <summary>
        <para>Dyne (“dyn”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Force.Lbf">
      <summary>
        <para>Pound force (“lbf”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Force.Newton">
      <summary>
        <para>Newton (“N”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Force.Pond">
      <summary>
        <para>Pond (“pond”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Force.Pound">
      <summary>
        <para>Pound force (“lbf”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.ForceUnitsConverter">
      <summary>
        <para>Converts force measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.ForceUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.ForceUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Information">
      <summary>
        <para>Lists units of information.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Information.Bit">
      <summary>
        <para>Bit (“bit”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Information.Byte">
      <summary>
        <para>Byte (“byte”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.InformationUnitsConverter">
      <summary>
        <para>Converts information measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.InformationUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.InformationUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Magnetism">
      <summary>
        <para>Lists units of measurement of a magnetic field.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Magnetism.Gauss">
      <summary>
        <para>Gauss (“ga”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Magnetism.Tesla">
      <summary>
        <para>Tesla (“T”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.MagnetismUnitsConverter">
      <summary>
        <para>Converts the measurement of a magnetic field from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.MagnetismUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.MagnetismUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Mass">
      <summary>
        <para>Lists units of mass measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.AtomicMassUnit">
      <summary>
        <para>U (atomic mass unit) “u”.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Cwt">
      <summary>
        <para>U.S. (short) hundredweight (“cwt”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Grain">
      <summary>
        <para>Grain (“grain”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Gram">
      <summary>
        <para>Gram (“g”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Hundredweight">
      <summary>
        <para>U.S. (short) hundredweight (“cwt”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.HundredweightImperial">
      <summary>
        <para>Imperial hundredweight (“lcwt”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Lbm">
      <summary>
        <para>Pound mass (avoirdupois) (“lbm”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Ounce">
      <summary>
        <para>Ounce mass (avoirdupois) (ozm”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Ozm">
      <summary>
        <para>Ounce mass (avoirdupois) (ozm”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Pound">
      <summary>
        <para>Pound mass (avoirdupois) (“lbm”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Slug">
      <summary>
        <para>Slug (“sg”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Stone">
      <summary>
        <para>Stone (“stone”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.Ton">
      <summary>
        <para>Ton (“ton”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Mass.TonImperial">
      <summary>
        <para>Imperial ton (“brton”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.MassUnitsConverter">
      <summary>
        <para>Converts mass measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.MassUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.MassUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.MetricPrefix">
      <summary>
        <para>Lists metric prefixes.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Atto">
      <summary>
        <para>1E-18 “a”</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Centi">
      <summary>
        <para>1E-02 (“c”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Deci">
      <summary>
        <para>1E-01 (“d”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Dekao">
      <summary>
        <para>1E+01 (“e”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Exa">
      <summary>
        <para>1E+18 (“E”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Femto">
      <summary>
        <para>1E-15 (“f”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Giga">
      <summary>
        <para>1E+09 (“G”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Hecto">
      <summary>
        <para>1E+02 (h”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Kilo">
      <summary>
        <para>1E+03 (“k”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Mega">
      <summary>
        <para>1E+06 (“M”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Micro">
      <summary>
        <para>1E-06 (“u”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Milli">
      <summary>
        <para>1E-03 (“m”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Nano">
      <summary>
        <para>1E-09 (“n”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.None">
      <summary>
        <para>1</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Peta">
      <summary>
        <para>1E+15 (“P”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Pico">
      <summary>
        <para>1E-12 (“p”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Tera">
      <summary>
        <para>1E+12 (“T”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Yocto">
      <summary>
        <para>1E-24 (“y”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Yotta">
      <summary>
        <para>1E+24 (“Y”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Zepto">
      <summary>
        <para>1E-21 (“z”)</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.MetricPrefix.Zetta">
      <summary>
        <para>1E+21 (“Z”)</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.MetricUnitsConverter">
      <summary>
        <para>Converts a value from one metric prefix multiplier to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.MetricUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.MetricUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Power">
      <summary>
        <para>Lists units of power measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Power.HorsePower">
      <summary>
        <para>Horsepower (“HP”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Power.HP">
      <summary>
        <para>Horsepower (“HP”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Power.PS">
      <summary>
        <para>Pferdestarke (HorsePower in German) “PS”.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Power.Watt">
      <summary>
        <para>Watt (“W”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.PowerUnitsConverter">
      <summary>
        <para>Converts power measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.PowerUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.PowerUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.PrefixUnitsConverter`1">
      <summary>
        <para>Base class for prefix converters.</para>
      </summary>
      <typeparam name="T" />
    </member>
    <member name="M:DevExpress.UnitConversion.PrefixUnitsConverter`1.Convert(System.Collections.Generic.IList{System.Double},`0,`0)">
      <summary>
        <para>Performs a metric conversion of a list of Double values from one metric prefix to another.</para>
      </summary>
      <param name="values">An <see cref="T:System.Collections.Generic.IList`1"/>&lt;<see cref="T:System.Double"/>,&gt;array of values.</param>
      <param name="from">Source metric prefix.</param>
      <param name="to">Target metric prefix.</param>
    </member>
    <member name="M:DevExpress.UnitConversion.PrefixUnitsConverter`1.Convert(System.Collections.Generic.IList{System.Double},`0)">
      <summary>
        <para>Use the Convert(IList&lt;double&gt; values, T from, T to) method instead.</para>
      </summary>
      <param name="values" />
      <param name="prefix" />
    </member>
    <member name="M:DevExpress.UnitConversion.PrefixUnitsConverter`1.Convert(System.Double,`0,`0)">
      <summary>
        <para>Performs a metric conversion of a Double value from one metric prefix to another.</para>
      </summary>
      <param name="value">A <see cref="T:System.Double"/> source value.</param>
      <param name="from">Source metric prefix.</param>
      <param name="to">Target metric prefix.</param>
      <returns>A <see cref="T:System.Double"/> value.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.PrefixUnitsConverter`1.Convert(System.Double,`0)">
      <summary>
        <para>Use the Convert(double value, T from, T to) method instead.</para>
      </summary>
      <param name="value" />
      <param name="prefix" />
      <returns />
    </member>
    <member name="M:DevExpress.UnitConversion.PrefixUnitsConverter`1.Convert(System.Double[],`0,`0)">
      <summary>
        <para>Performs a metric conversion of an array of Double values from one metric prefix to another.</para>
      </summary>
      <param name="values">An array of <see cref="T:System.Double"/> values.</param>
      <param name="from">Source metric prefix.</param>
      <param name="to">Target metric prefix.</param>
    </member>
    <member name="M:DevExpress.UnitConversion.PrefixUnitsConverter`1.Convert(System.Double[],`0)">
      <summary>
        <para>Use the Convert(double[] values, T from, T to) method instead.</para>
      </summary>
      <param name="values" />
      <param name="prefix" />
    </member>
    <member name="M:DevExpress.UnitConversion.PrefixUnitsConverter`1.GetTransform(`0,`0)">
      <summary>
        <para>Obtains a delegate function that performs the conversion.</para>
      </summary>
      <param name="from">Source metric prefix.</param>
      <param name="to">Target metric prefix.</param>
      <returns>A delegate method that performs the conversion.</returns>
    </member>
    <member name="T:DevExpress.UnitConversion.Pressure">
      <summary>
        <para>Lists units of pressure measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.Atm">
      <summary>
        <para>Atmosphere (“atm”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.Atmosphere">
      <summary>
        <para>Atmosphere (“atm”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.MmHg">
      <summary>
        <para>mm of Mercury (“mmHg”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.P">
      <summary>
        <para>Pascal (“Pa”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.Pa">
      <summary>
        <para>Pascal (“Pa”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.Pascal">
      <summary>
        <para>Pascal (“Pa”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.PoundPerSquareInch">
      <summary>
        <para>Pound-force per square inch (“psi”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.Psi">
      <summary>
        <para>Pound-force per square inch (“psi”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Pressure.Torr">
      <summary>
        <para>Torr (“Torr”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.PressureUnitsConverter">
      <summary>
        <para>Converts area measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.PressureUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.PressureUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.QuantityValue`1">
      <summary>
        <para>Contains the unit of measurement and its value.</para>
      </summary>
      <typeparam name="T" />
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Addition(DevExpress.UnitConversion.QuantityValue{`0},DevExpress.UnitConversion.QuantityValue{`0})">
      <summary>
        <para>Adds two <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> objects and returns the result as the <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object.</para>
      </summary>
      <param name="value1">The first <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/>  object to add.</param>
      <param name="value2">The second <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object to add.</param>
      <returns>The sum of two <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> objects.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Addition(DevExpress.UnitConversion.QuantityValue{`0},System.Double)">
      <summary>
        <para>Adds a <see cref="T:System.Double"/> value to the <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object and returns the result as the <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object.</para>
      </summary>
      <param name="value1">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object to add.</param>
      <param name="value2">A <see cref="T:System.Double"/> value to add.</param>
      <returns>The sum of <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object and the <see cref="T:System.Double"/> value.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Decrement(DevExpress.UnitConversion.QuantityValue{`0})">
      <summary>
        <para>Decrements a <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object by one and returns the result as the <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object.</para>
      </summary>
      <param name="value1">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object to be decremented.</param>
      <returns>The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object that is the result of decrementing.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Division(DevExpress.UnitConversion.QuantityValue{`0},System.Double)">
      <summary>
        <para>Divides two <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> objects.</para>
      </summary>
      <param name="value1">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object that is the dividend.</param>
      <param name="value2">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object that is the divisor.</param>
      <returns>The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object that is the result of dividing.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Implicit(DevExpress.UnitConversion.QuantityValue{`0})~System.Double">
      <summary>
        <para>Defines an implicit conversion of a <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object to a <see cref="T:System.Double"/>.</para>
      </summary>
      <param name="value">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object to convert.</param>
      <returns>The <see cref="T:System.Double"/> value that is the result of conversion.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Increment(DevExpress.UnitConversion.QuantityValue{`0})">
      <summary>
        <para>Increments the <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value by 1.</para>
      </summary>
      <param name="value1">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value to increment.</param>
      <returns>The result of incrementing.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Multiply(DevExpress.UnitConversion.QuantityValue{`0},System.Double)">
      <summary>
        <para>Multiplies the <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> values by the <see cref="T:System.Double"/> value.</para>
      </summary>
      <param name="value1">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value to multiply.</param>
      <param name="value2">The <see cref="T:System.Double"/> value to multiply.</param>
      <returns>The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> object that is the result of the multiplication.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Subtraction(DevExpress.UnitConversion.QuantityValue{`0},DevExpress.UnitConversion.QuantityValue{`0})">
      <summary>
        <para>Subtracts the <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value from another <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value.</para>
      </summary>
      <param name="value1">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value that is the minuend.</param>
      <param name="value2">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value that is the subtrahend.</param>
      <returns>The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value that is the result of subtraction.</returns>
    </member>
    <member name="M:DevExpress.UnitConversion.QuantityValue`1.op_Subtraction(DevExpress.UnitConversion.QuantityValue{`0},System.Double)">
      <summary>
        <para>Subtracts the <see cref="T:System.Double"/> value from the <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value.</para>
      </summary>
      <param name="value1">The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value that is the minuend.</param>
      <param name="value2">The <see cref="T:System.Double"/> value that is the subtrahend.</param>
      <returns>The <see cref="T:DevExpress.UnitConversion.QuantityValue`1"/> value that is the result of subtraction.</returns>
    </member>
    <member name="P:DevExpress.UnitConversion.QuantityValue`1.Value">
      <summary>
        <para>Gets or sets a numerical value of the quantity expressed in the base measurement unit of the specified type.</para>
      </summary>
      <value>A <see cref="T:System.Double"/> value of the quantity.</value>
    </member>
    <member name="T:DevExpress.UnitConversion.Speed">
      <summary>
        <para>Lists units of speed measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Speed.Knot">
      <summary>
        <para>Knot (“kn”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Speed.KnotAdmiralty">
      <summary>
        <para>Admiralty knot (“admkn”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Speed.MetersPerHour">
      <summary>
        <para>Meters per hour (“m/h”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Speed.MetersPerSecond">
      <summary>
        <para>Meters per second (“m/s”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Speed.MilesPerHour">
      <summary>
        <para>Miles per hour (“mph”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Speed.Mph">
      <summary>
        <para>Miles per hour (“mph”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.SpeedUnitsConverter">
      <summary>
        <para>Converts speed measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.SpeedUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.SpeedUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Temperature">
      <summary>
        <para>Lists units of temperature measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.C">
      <summary>
        <para>Degree Celsius (“C”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.Celcius">
      <summary>
        <para>Degree Celsius (“C”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.Celsius">
      <summary>
        <para>Degree Celsius (“C”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.F">
      <summary>
        <para>Degree Fahrenheit (“F”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.Fahrenheit">
      <summary>
        <para>Degree Fahrenheit (“F”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.K">
      <summary>
        <para>Kelvin (“K”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.Kelvin">
      <summary>
        <para>Kelvin (“K”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.Rankine">
      <summary>
        <para>Degree Rankine (“Rank”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Temperature.Reaumur">
      <summary>
        <para>Degree Reaumur (“Reau”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.TemperatureUnitsConverter">
      <summary>
        <para>Converts temperature measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.TemperatureUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.TemperatureUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Time">
      <summary>
        <para>Lists units of time measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Time.Day">
      <summary>
        <para>Day (“day”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Time.Hour">
      <summary>
        <para>Hour (“hr”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Time.Minute">
      <summary>
        <para>Minute (“min”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Time.Second">
      <summary>
        <para>Second (“sec”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Time.Year">
      <summary>
        <para>Year (“yr”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.TimeUnitsConverter">
      <summary>
        <para>Converts time measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.TimeUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.TimeUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.Units">
      <summary>
        <para>Provides access to unit converters.</para>
      </summary>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Area">
      <summary>
        <para>Provides access to the unit converter for area measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.AreaUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Binary">
      <summary>
        <para>Provides access to unit converter for binary metric prefixes.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.BinaryUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Distance">
      <summary>
        <para>Provides access to the unit converter for distance  measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.DistanceUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Energy">
      <summary>
        <para>Provides access to the unit converter for energy measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.EnergyUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Force">
      <summary>
        <para>Provides access to the unit converter for force measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.ForceUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Information">
      <summary>
        <para>Provides access to the unit converter for information measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.InformationUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Magnetism">
      <summary>
        <para>Provides access to the unit converter for magnetic field measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.MagnetismUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Mass">
      <summary>
        <para>Provides access to the unit converter for mass measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.MassUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Metric">
      <summary>
        <para>Provides access to the unit converter for metric prefixes.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.MetricUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Power">
      <summary>
        <para>Provides access to the unit converter for power measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.PowerUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Pressure">
      <summary>
        <para>Provides access to the unit converter for pressure measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.PressureUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Speed">
      <summary>
        <para>Provides access to the unit converter for speed measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.SpeedUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Temperature">
      <summary>
        <para>Provides access to the unit converter for temperature measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.TemperatureUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Time">
      <summary>
        <para>Provides access to the unit converter for time measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.TimeUnitsConverter"/> object.</value>
    </member>
    <member name="P:DevExpress.UnitConversion.Units.Volume">
      <summary>
        <para>Provides access to the unit converter for volume measurement units.</para>
      </summary>
      <value>A <see cref="T:DevExpress.UnitConversion.VolumeUnitsConverter"/> object.</value>
    </member>
    <member name="T:DevExpress.UnitConversion.Volume">
      <summary>
        <para>Lists units of volume measurement.</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Bbl">
      <summary>
        <para>U.S. oil barrel (“barrel”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Bushel">
      <summary>
        <para>U.S. bushel (“bushel”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicAngstrom">
      <summary>
        <para>Cubic angstrom (“ang3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicFoot">
      <summary>
        <para>Cubic feet (“ft3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicInch">
      <summary>
        <para>Cubic inch (“in3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicLightYear">
      <summary>
        <para>Cubic light-year (“ly3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicMeter">
      <summary>
        <para>Cubic meter (“m3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicMile">
      <summary>
        <para>Cubic Mile (“mi3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicMileNautical">
      <summary>
        <para>Cubic nautical mile (“Nmi3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicPicaPoint">
      <summary>
        <para>Cubic Pica (“Pica3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.CubicYard">
      <summary>
        <para>Cubic yard (“yd3”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Cup">
      <summary>
        <para>Cup (“cup”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Gallon">
      <summary>
        <para>Gallon (“gal”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.GallonImperial">
      <summary>
        <para>Imperial gallon (U.K.) (“uk_gal”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.GrossRegisteredTon">
      <summary>
        <para>Gross Registered Ton (“GRT”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.GRT">
      <summary>
        <para>Gross Registered Ton (“GRT”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Liter">
      <summary>
        <para>Liter (“lt”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.MeasurementTon">
      <summary>
        <para>Measurement ton (freight ton) (“MTON”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Mton">
      <summary>
        <para>Measurement ton (freight ton) (“MTON”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.OilBarrel">
      <summary>
        <para>U.S. oil barrel (“barrel”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.OunceFluid">
      <summary>
        <para>Fluid ounce (“oz”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Oz">
      <summary>
        <para>Fluid ounce (“oz”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Pint">
      <summary>
        <para>U.S. pint (“pt”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.PintImperial">
      <summary>
        <para>U.K. pint (“uk_pt”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Quart">
      <summary>
        <para>Quart (“qt”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.QuartImperial">
      <summary>
        <para>Imperial quart (U.K.) (“uk_qt”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Regton">
      <summary>
        <para>Gross Registered Ton (“GRT”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Tablespoon">
      <summary>
        <para>Tablespoon (“tbs”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.Teaspoon">
      <summary>
        <para>Teaspoon (“tsp”).</para>
      </summary>
    </member>
    <member name="F:DevExpress.UnitConversion.Volume.TeaspoonModern">
      <summary>
        <para>Modern teaspoon (“tspm”).</para>
      </summary>
    </member>
    <member name="T:DevExpress.UnitConversion.VolumeUnitsConverter">
      <summary>
        <para>Converts volume measurement from one unit to another.</para>
      </summary>
    </member>
    <member name="M:DevExpress.UnitConversion.VolumeUnitsConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:DevExpress.UnitConversion.VolumeUnitsConverter"/> class with the default settings.</para>
      </summary>
    </member>
    <member name="N:DevExpress.XtraRichEdit">
      <summary>
        <para>Contains classes which implement the main functionality of the RichEdit suite.</para>
      </summary>
    </member>
    <member name="T:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions">
      <summary>
        <para>Defines extension methods for the <see cref="T:DevExpress.XtraRichEdit.RichEditDocumentServer"/> class.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use these methods in production code.</para>
      </summary>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.ExportToPdfAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the document to the specified stream with the specified options in PDF format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream to which the document is exported.</param>
      <param name="pdfExportOptions">A PdfExportOptions instance that contains PDF export options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.ExportToPdfAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraPrinting.PdfExportOptions)">
      <summary>
        <para>Asynchronously exports the document to the specified stream with the specified options in the PDF format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream to which the document is exported.</param>
      <param name="pdfExportOptions">A PdfExportOptions instance that contains PDF export options.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.ExportToPdfAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the document to the specified stream in the PDF format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream to which the document is exported.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.ExportToPdfAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream)">
      <summary>
        <para>Asynchronously exports the document to the specified stream in the PDF format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream to which the document is exported.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.ExportToPdfAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraPrinting.PdfExportOptions,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the document to the specified file in the PDF format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The file name (including the full path) for the newly created PDF file.</param>
      <param name="pdfExportOptions">A PdfExportOptions instance that contains PDF export options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.ExportToPdfAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraPrinting.PdfExportOptions)">
      <summary>
        <para>Asynchronously exports the document to the specified file with the specified options in PDF format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The file name (including the full path) for the newly created PDF file.</param>
      <param name="pdfExportOptions">A PdfExportOptions instance that contains PDF export options.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.ExportToPdfAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously exports the document to the specified file in the PDF format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The file name (including the full path) for the newly created PDF file.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.ExportToPdfAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String)">
      <summary>
        <para>Asynchronously exports the document to the specified file in the PDF format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The file name (including the full path) for the newly created PDF file.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[],DevExpress.XtraRichEdit.DocumentFormat,System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document in the specified format from a byte array. You can use this method to load HTML documents with connected files.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="documentFormat">An enumeration member that specifies the format of the loaded document.</param>
      <param name="sourceUri">The document’s URI. You can use this parameter to load files associated with an HTML document.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[],DevExpress.XtraRichEdit.DocumentFormat,System.String)">
      <summary>
        <para>Asynchronously loads a document in the specified format from a byte array. You can use this method to load HTML documents with connected files.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="documentFormat">An enumeration member that specifies the format of the loaded document.</param>
      <param name="sourceUri">The document’s URI. You can use this parameter to load files associated with an HTML document.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[],DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document in the specified format from a byte array.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="documentFormat">An enumeration member that specifies the format of the loaded document.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[],DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously loads a document in the specified format from a byte array.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="documentFormat">An enumeration member that specifies the format of the loaded document.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[],System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document from a byte array. The file format is determined based on document content.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[])">
      <summary>
        <para>Asynchronously loads a document from a byte array. The file format is determined based on document content.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat,System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document from a stream in the specified format. External content for HTML format is retrieved from the specified source (base) URI.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="stream">The stream from which to load a document.</param>
      <param name="documentFormat">The DocumentFormat enumeration member that indicates the document format.</param>
      <param name="sourceUri">The document URI.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat,System.String)">
      <summary>
        <para>Asynchronously loads a document from a stream in the specified format. External content for HTML format is retrieved from the specified source (base) URI.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="stream">The stream from which to load a document.</param>
      <param name="documentFormat">The DocumentFormat enumeration member that indicates the document format.</param>
      <param name="sourceUri">The document URI.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document from a stream in the specified format.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="stream">The stream from which to load a document.</param>
      <param name="documentFormat">The DocumentFormat enumeration member that indicates the document format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously loads a document from a stream in the specified format.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="stream">The stream from which to load a document.</param>
      <param name="documentFormat">The DocumentFormat enumeration member that indicates the document format.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document from a stream. The file format is determined by its content.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="stream">The stream from which to load a document.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream)">
      <summary>
        <para>Asynchronously loads a document from a stream. The file format is determined by its content.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="stream">The stream from which to load a document.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat,System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document from a file in the specified format. External content for HTML format is retrieved from the specified source (base) URI.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="filename">A string that specifies the file to load (including the full path).</param>
      <param name="documentFormat">The DocumentFormat enumeration member that indicates the document format.</param>
      <param name="sourceUri">The document URI.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat,System.String)">
      <summary>
        <para>Asynchronously loads a document from a file in the specified format. External content for HTML format is retrieved from the specified source (base) URI.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="filename">A string that specifies the file to load (including the full path).</param>
      <param name="documentFormat">The DocumentFormat enumeration member that indicates the document format.</param>
      <param name="sourceUri">The document URI.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document from a file in the specified format.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="fileName">A string that specifies the file to load (including the full path).</param>
      <param name="documentFormat">The DocumentFormat enumeration member that indicates the document format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously loads a document from a file in the specified format.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="fileName">A string that specifies the file to load (including the full path).</param>
      <param name="documentFormat">The DocumentFormat enumeration member that indicates the document format.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document from a file. The file format is determined by its content.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="fileName">A string that specifies the file to load (including the full path).</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String)">
      <summary>
        <para>Asynchronously loads a document from a file. The file format is determined by its content.</para>
      </summary>
      <param name="self">Current RichEditDocumentServer instance.</param>
      <param name="fileName">A string that specifies the file to load (including the full path).</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentProperties(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Loads metadata (document properties) of a document in a specified format from the stream.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream that stores a document which metadata should be loaded.</param>
      <param name="documentFormat">The document format.</param>
      <returns>A collection of document properties.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentProperties(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream)">
      <summary>
        <para>Loads metadata (document properties) of a document from the specified stream. The document format is determined automatically.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream that stores the document which metadata should be loaded.</param>
      <returns>A collection of document properties.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentProperties(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Loads metadata (document properties) of a document in the specified format from the specified file.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">A path to the document which metadata should be loaded.</param>
      <param name="documentFormat">The document format.</param>
      <returns>A collection of document properties.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentProperties(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String)">
      <summary>
        <para>Loads metadata (document properties) of a document from the specified file. The document format is determined automatically.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">A path to the document which metadata should be loaded.</param>
      <returns>A collection of document properties.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[],DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document template in the specified format from a byte array.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="documentFormat">An enumeration member that specifies the format of the loaded document.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[],DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously loads a document template in the specified format from a byte array.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="documentFormat">An enumeration member that specifies the format of the loaded document.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[],System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document template from a byte array.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.Byte[])">
      <summary>
        <para>Asynchronously loads a document template from a byte array.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="buffer">A byte array that contains document data.</param>
      <returns>Returns true if the document was loaded successfully; otherwise, false is returned.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document template from the stream in the specified document format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream used to load a document.</param>
      <param name="documentFormat">The <see cref="T:DevExpress.XtraRichEdit.DocumentFormat"/> enumeration value that indicates the document format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously loads a document template from a stream with the specified format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream used to load a document.</param>
      <param name="documentFormat">The <see cref="T:DevExpress.XtraRichEdit.DocumentFormat"/> enumeration value that indicates the document format.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document template from the stream.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream used to load a document.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream)">
      <summary>
        <para>Asynchronously loads a document template from the stream.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">A stream used to load a document.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document template from the stream.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The file to load (including the full path).</param>
      <param name="documentFormat">The <see cref="T:DevExpress.XtraRichEdit.DocumentFormat"/> enumeration value that indicates the document format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously loads a document template from the file in the specified document format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The file to load (including the full path).</param>
      <param name="documentFormat">The <see cref="T:DevExpress.XtraRichEdit.DocumentFormat"/> enumeration value that indicates the document format.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously loads a document template from the file.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The file to load (including the full path).</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.LoadDocumentTemplateAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String)">
      <summary>
        <para>Asynchronously loads a document template from the file.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The file to load (including the full path).</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object that returns true if the document is successfully loaded; otherwise, false.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,DevExpress.XtraRichEdit.DocumentFormat,DevExpress.XtraRichEdit.API.Native.EncryptionSettings,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified format and encrypts it with a password.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="documentFormat">An enumeration member that specifies the output document format.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <returns>Returns a byte array that contains encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,DevExpress.XtraRichEdit.DocumentFormat,DevExpress.XtraRichEdit.API.Native.EncryptionSettings)">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified format and encrypts it with a password.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="documentFormat">An enumeration member that specifies the output document format.</param>
      <param name="encryptionSettings">Specifies encryption settings.</param>
      <returns>Returns a byte array that contains encrypted data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified file format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="documentFormat">An enumeration member that specifies the output document format.</param>
      <param name="cancellationToken">A cancellation token that indicates whether to cancel the operation.</param>
      <returns>Returns a byte array that contains data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously saves the document to a byte array in the specified file format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="documentFormat">An enumeration member that specifies the output document format.</param>
      <returns>Returns a byte array that contains data in the specified format.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat,DevExpress.XtraRichEdit.API.Native.EncryptionSettings,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a stream with the specified document format and encryption options.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">The stream to which to output the document.</param>
      <param name="documentFormat">The enumeration value that indicates the document format.</param>
      <param name="encryptionSettings">An object that contains document encryption options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat,DevExpress.XtraRichEdit.API.Native.EncryptionSettings)">
      <summary>
        <para>Asynchronously saves the document to a stream with the specified document format and encryption options.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">The stream used to output the document.</param>
      <param name="documentFormat">Indicates the document format.</param>
      <param name="encryptionSettings">An object that contains document encryption options.</param>
      <returns>A Task object that represents an asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a stream with the specified document format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">The stream to which to output the document.</param>
      <param name="documentFormat">The enumeration value that indicates the document format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.IO.Stream,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously saves the document to a stream with the specified document format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="stream">The stream to which to output the document.</param>
      <param name="documentFormat">The enumeration value that indicates the document format.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat,DevExpress.XtraRichEdit.API.Native.EncryptionSettings,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a file, with the specified document format and encryption options.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The path to the file to which to save the document.</param>
      <param name="documentFormat">The enumeration value that indicates the document format.</param>
      <param name="encryptionSettings">An object that contains document encryption options.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat,DevExpress.XtraRichEdit.API.Native.EncryptionSettings)">
      <summary>
        <para>Asynchronously saves the document to a file with the specified document format and encryption options.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The path to the file to which to save the document.</param>
      <param name="documentFormat">The enumeration value that indicates the document format.</param>
      <param name="encryptionSettings">An object that contains document encryption options.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat,System.Threading.CancellationToken)">
      <summary>
        <para>Asynchronously saves the document to a stream with the specified document format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The path to the file to which to save the document.</param>
      <param name="documentFormat">The enumeration value that indicates the document format.</param>
      <param name="cancellationToken">A CancellationToken object used to trace requests to cancel an operation.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="M:DevExpress.XtraRichEdit.RichEditDocumentServerExtensions.SaveDocumentAsync(DevExpress.XtraRichEdit.RichEditDocumentServer,System.String,DevExpress.XtraRichEdit.DocumentFormat)">
      <summary>
        <para>Asynchronously saves the document to a stream with the specified document format.</para>
      </summary>
      <param name="self">The current RichEditDocumentServer instance.</param>
      <param name="fileName">The path to the file to which to save the document.</param>
      <param name="documentFormat">The enumeration value that indicates the document format.</param>
      <returns>An asynchronous export operation.</returns>
    </member>
    <member name="N:DevExpress.XtraSpreadsheet.Services">
      <summary>
        <para>Contains interfaces that define services implemented in the SpreadsheetControl.</para>
      </summary>
    </member>
    <member name="T:DevExpress.XtraSpreadsheet.Services.OfficeChartsCrossPlatformExtensions">
      <summary>
        <para>Contains extension methods for the <see cref="T:DevExpress.Office.Services.OfficeCharts"/> class.</para>
      </summary>
    </member>
    <member name="M:DevExpress.XtraSpreadsheet.Services.OfficeChartsCrossPlatformExtensions.ActivateCrossPlatformCharts(DevExpress.Office.Services.OfficeCharts)">
      <summary>
        <para>Enables Spreadsheet chart support for the Word Processing Document API.</para>
        <para>You need a license for the DevExpress Office File API Subscription or DevExpress Universal Subscription to use this method in production code.</para>
      </summary>
      <param name="instance">An <see cref="T:DevExpress.Office.Services.OfficeCharts"/> instance.</param>
    </member>
  </members>
</doc>